#+title: emacs
#+author: j0lms
#+description: illiterate config file
#+startup: overview
#+options:toc:1

* toc :toc:
:PROPERTIES:
:ID:       63a096f5-3516-4d4a-85ee-b19565836012
:END:
- [[#preamble][preamble]]
- [[#elpaca][elpaca]]
- [[#personal][personal]]
- [[#packages][packages]]
  - [[#all-the-icons][all the icons]]
  - [[#nerd-icons][nerd icons]]
  - [[#which-key][which key]]
  - [[#toc][toc]]
  - [[#journal][journal]]
  - [[#bullets][bullets]]
  - [[#projectile][projectile]]
  - [[#perspective][perspective]]
  - [[#magit][magit]]
  - [[#treemacs][treemacs]]
  - [[#ligatures][ligatures]]
  - [[#pretty][pretty]]
  - [[#snippets][snippets]]
  - [[#company][company]]
  - [[#multiple-cursors][multiple cursors]]
  - [[#undo-tree][undo tree]]
  - [[#doom-modeline][doom modeline]]
  - [[#deft][deft]]
  - [[#emojify][emojify]]
  - [[#beacon][beacon]]
  - [[#hl-todo][hl todo]]
  - [[#diff-hl][diff hl]]
  - [[#flycheck][flycheck]]
  - [[#dashboard][dashboard]]
  - [[#ace-popup-menu][ace popup menu]]
  - [[#pulsar][pulsar]]
  - [[#elpy][elpy]]
  - [[#minimap][minimap]]
  - [[#unicode][unicode]]
  - [[#amx][amx]]
  - [[#ido-completing-read][ido completing read]]
  - [[#lsp][lsp]]
  - [[#elpher][elpher]]
  - [[#elfeed][elfeed]]
  - [[#solaire][solaire]]
  - [[#indent-guide][indent guide]]
  - [[#emamux][emamux]]
  - [[#pdf][pdf]]
  - [[#smartparens][smartparens]]
  - [[#modern][modern]]
  - [[#xonsh][xonsh]]
  - [[#brain][brain]]
  - [[#pyenv][pyenv]]
  - [[#eshell][eshell]]
  - [[#term][term]]
  - [[#workgroups][workgroups]]
  - [[#origami][origami]]
  - [[#hl-defined][hl defined]]
  - [[#elmacro][elmacro]]
  - [[#eros][eros]]
- [[#bindings][bindings]]
- [[#fonts][fonts]]
- [[#org][org]]
- [[#gui][gui]]
- [[#footer][footer]]

* preamble
:PROPERTIES:
:ID:       4788d5aa-0bd9-4072-a089-f3e5d0801410
:END:
#+begin_src emacs-lisp
  ;;; config.el --- Voidmacs config file

  ;;; Commentary:

  ;; This file is tangled from ~/.voi.d/org/brain/config.org

  ;;; Code:
#+end_src
* elpaca
:PROPERTIES:
:ID:       3f7ad895-e9c9-4828-ac91-8ff3f07e4098
:END:
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))

  (elpaca-wait)
#+end_src

#+RESULTS:

* personal
:PROPERTIES:
:ID:       f041b776-7d1d-428b-8f9f-98d31d5fce63
:END:
#+begin_src emacs-lisp -n
  (setq user-full-name "John Doe"
	user-mail-address "john@doe.com")
  ;;(setq warning-minimum-level :emergency)
  (setq server-client-instructions nil)
  (eval-and-compile
    (setq gc-cons-threshold 402653184
	  gc-cons-percentage 0.6))
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq inhibit-default-init t
	inhibit-startup-echo-area-message t
	inhibit-startup-screen t
	initial-scratch-message nil)
  (setq large-file-warning-threshold 100000000)
  (defconst gas-savefile-dir (expand-file-name "savefile" user-emacs-directory))
  (unless (file-exists-p gas-savefile-dir)
    (make-directory gas-savefile-dir))
  (blink-cursor-mode -1)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (setq ring-bell-function 'ignore)
  (setq scroll-margin 0
	scroll-conservatively 100000
	scroll-preserve-screen-position 1)
  (setq use-short-answers t)
  (setq confirm-nonexistent-file-or-buffer nil)
  (delete-selection-mode 1)
  (setq kill-buffer-query-functions
	(remq 'process-kill-buffer-query-function
	      kill-buffer-query-functions))
  (setq frame-title-format
	'((:eval (if (buffer-file-name)
		     (abbreviate-file-name (buffer-file-name))
		   "%b"))))
  (setq-default x-stretch-cursor t)
  (setq completion-auto-help nil)
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
  (let ((week (* 60 60 24 7))
	(current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
		 (> (- current (float-time (nth 5 (file-attributes file))))
		    week))
	(message "%s" file)
	(delete-file file))))
  (global-auto-revert-mode t)
  (setq vc-make-backup-files t)
  (setq save-interprogram-paste-before-kill nil)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq kill-whole-line t)
  (setq search-default-mode 'char-fold-to-regexp)
  (setq global-mark-ring-max 50000)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (set 'linuxp (when (eq system-type 'gnu/linux) "yes"))
  (set 'windowp (when (eq system-type 'windows-nt) "yes"))
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))

  (defun format-date (format)
    (let ((system-time-locale "es_VE.UTF-8"))
      (insert (format-time-string format))))

  (defun insert-deadline ()
    (interactive)
    (format-date "<%Y-%M-%d %A>"))

  (defun insert-schedule ()
    (interactive)
    (format-date "<%Y-%m-%d %H:%M>"))

  (defun insert-timestamp ()
    (interactive)
    (format-date "[%Y-%m-%d %A %H:%M:%S]"))
#+end_src

#+RESULTS:
: insert-timestamp

* packages 
:PROPERTIES:
:ID:       d6705198-cb2e-45a1-bbd7-7a3ed7a891e4
:END:
** all the icons
:PROPERTIES:
:ID:       f26f29bb-31c2-4d7b-b36d-7add424cce9a
:END:
#+begin_src emacs-lisp
  (use-package all-the-icons
    :init
    (all-the-icons-install-fonts t)
    :if (display-graphic-p))
#+end_src

#+RESULTS:

** nerd icons
:PROPERTIES:
:ID:       c4aa9e95-8a7f-4943-800f-ff9d53559130
:END:
#+begin_src emacs-lisp
    (use-package nerd-icons
      :init
      (nerd-icons-install-fonts t))
#+end_src

#+RESULTS:

** which key
:PROPERTIES:
:ID:       d234f50f-c1e1-4a86-ae87-7ea6e92a0d9a
:END:
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.5
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

#+RESULTS:

** toc
:PROPERTIES:
:ID:       da0c5bb2-1b33-4624-87b9-656d5906b4b3
:END:
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

#+RESULTS:

** journal
:PROPERTIES:
:ID:       301dbaba-61ea-4345-86c9-e65837ce0301
:END:
#+begin_src emacs-lisp
  (use-package org-journal
    :bind
    ("C-c n j" . org-journal-new-entry)
    ("C-c n s" . org-journal-new-scheduled-entry)
    :init
    (setq org-journal-date-format "[%Y-%m-%d %A]"
	  org-journal-date-prefix "* Entries "
	  org-journal-file-format "%Y-%m-%d.org"
	  org-journal-dir "~/.voi.d/org/brain/journal"
	  org-journal-file-header "#+title: daily\n#+filetags: journal\n"
	  org-journal-time-format "[%Y-%m-%d %H:%M:%S] "
	  org-journal-enable-agenda-integration t))
#+end_src

#+RESULTS:

** bullets
:PROPERTIES:
:ID:       0309864b-d05a-42dc-9414-4e5517b6f5b1
:END:
#+begin_src emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

#+RESULTS:

** projectile
:PROPERTIES:
:ID:       93b43568-afd4-4f26-a0c7-99db11931f36
:END:
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1))
#+end_src

#+RESULTS:

** perspective
:PROPERTIES:
:ID:       57ad712e-854c-44a7-8d34-c337aa962b84
:END:
#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers) 
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode))
#+end_src

#+RESULTS:

** magit
:PROPERTIES:
:ID:       44d8ddff-ef93-42fc-a519-a59279ae6417
:END:
#+begin_src emacs-lisp
  (use-package magit
    :init
    (with-eval-after-load 'magit-mode
      (add-hook 'after-save-hook 'magit-after-save-refresh-status t)))
#+end_src

#+RESULTS:

** treemacs
:PROPERTIES:
:ID:       0c8102f7-b16f-4ae4-884a-a639bf932986
:END:
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)
    
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-nerd-icons
    :config
    (treemacs-load-theme "nerd-icons"))

  (use-package treemacs-persp
    :after (treemacs persp-mode)
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
#+end_src 

#+RESULTS:
| lambda | nil | (display-line-numbers-mode -1) |

** ligatures
:PROPERTIES: 
:ID:       f644db69-04cd-444f-96ff-e0eda5962f5e
:END:


#+begin_src emacs-lisp
  (use-package ligature
    :config
    (ligature-set-ligatures 't
			    '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
			      ;; =:= =!=
			      ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
			      ;; ;; ;;;
			      (";" (rx (+ ";")))
			      ;; && &&&
			      ("&" (rx (+ "&")))
			      ;; !! !!! !. !: !!. != !== !~
			      ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
			      ;; ?? ??? ?:  ?=  ?.
			      ("?" (rx (or ":" "=" "\." (+ "?"))))
			      ;; %% %%%
			      ("%" (rx (+ "%")))
			      ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
			      ;; |->>-||-<<-| |- |== ||=||
			      ;; |==>>==<<==<=>==//==/=!==:===>
			      ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
					      "-" "=" ))))
			      ;; \\ \\\ \/
			      ("\\" (rx (or "/" (+ "\\"))))
			      ;; ++ +++ ++++ +>
			      ("+" (rx (or ">" (+ "+"))))
			      ;; :: ::: :::: :> :< := :// ::=
			      (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
			      ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
			      ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
					      "="))))
			      ;; .. ... .... .= .- .? ..= ..<
			      ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
			      ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
			      ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
			      ;; *> */ *)  ** *** ****
			      ("*" (rx (or ">" "/" ")" (+ "*"))))
			      ;; www wwww
			      ("w" (rx (+ "w")))
			      ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
			      ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
			      ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
			      ;; << <<< <<<<
			      ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
					      "-"  "/" "|" "="))))
			      ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
			      ;; >> >>> >>>>
			      (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
			      ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
			      ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
					   (+ "#"))))
			      ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
			      ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
			      ;; __ ___ ____ _|_ __|____|_
			      ("_" (rx (+ (or "_" "|"))))
			      ;; Fira code: 0xFF 0x12
			      ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
			      ;; Fira code:
			      "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
			      ;; The few not covered by the regexps.
			      "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    (global-ligature-mode t))
#+end_src

#+RESULTS:

** pretty
:PROPERTIES:
:ID:       0cbdbf46-8628-4deb-844e-fd63997c10b7
:END:
#+begin_src emacs-lisp
  (use-package pretty-mode
    :init
    (global-pretty-mode t)  
    (add-hook 'my-pretty-language-hook 'turn-on-pretty-mode))
#+end_src

#+RESULTS:

** snippets
:PROPERTIES:
:ID:       7d2d35a0-5c12-47ad-922a-e81051fed46c
:END:
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode t))
  (use-package yasnippet-snippets)
#+end_src 

#+RESULTS:

** company
:PROPERTIES:
:ID:       b6bba2c5-6d05-4987-bb29-5c05c96d1f13
:END:
#+begin_src emacs-lisp 
  (use-package company
    :init
    (global-company-mode t))
#+end_src

#+RESULTS:

** multiple cursors
:PROPERTIES:
:ID:       a5f70eb6-2872-4562-8be2-2f384a5487f6
:END:
#+begin_src emacs-lisp 
  (use-package multiple-cursors
    :init
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-x C-<") 'mc/mark-all-like-this))
#+end_src

#+RESULTS:

** undo tree
:PROPERTIES:
:ID:       da5ad3fe-6d4d-4fbb-bf49-893c39fc7363
:END:
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode))
  (with-eval-after-load 'undo-tree
    (setq undo-tree-auto-save-history nil))
#+end_src

#+RESULTS:

** doom modeline
:PROPERTIES:
:ID:       a7197c15-fc23-4bc4-9fdd-cb0b86e67600
:END:
#+begin_src emacs-lisp
  (use-package smart-mode-line-atom-one-dark-theme)
  (use-package smart-mode-line
    :init
    (setq sml/no-confirm-load-theme t)
    (setq sml/theme 'atom-one-dark)
    (sml/setup))
  (use-package doom-modeline
    :ensure t
    :init 
    (doom-modeline-mode 1))
#+end_src

#+RESULTS:

** deft
:PROPERTIES:
:ID:       cf0ec7b7-f369-4af8-b92e-4b30bc83bb05
:END:
#+begin_src emacs-lisp
  (use-package deft
    :bind ("<f8>" . deft)
    :commands (deft)
    :config (setq deft-directory "~/notes"
		  deft-extensions '("md" "org")
		  deft-recursive t
		  deft-use-filename-as-title t))
#+end_src

#+RESULTS:

** emojify
:PROPERTIES:
:ID:       d5e36405-e551-4aea-88ea-263156773cd0
:END:
#+begin_src emacs-lisp 
  (use-package emojify
    :hook (after-init . global-emojify-mode))
#+end_src

#+RESULTS:

** beacon
:PROPERTIES:
:ID:       fbe5f281-11c8-437f-a9cd-1a68972a2078
:END:
#+begin_src emacs-lisp
  (use-package beacon
    :init
    (beacon-mode 1))
#+end_src

#+RESULTS:

** hl todo
:PROPERTIES:
:ID:       ce78fb0e-034a-4121-bb44-475684a02bf2
:END:
#+begin_src emacs-lisp
  (use-package hl-todo
    :init
    (global-hl-todo-mode))
#+end_src

#+RESULTS:

** diff hl
:PROPERTIES:
:ID:       49575fc3-e518-4488-828c-5d1be7d2e74f
:END:
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode +1)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

#+RESULTS:

** flycheck
:PROPERTIES:
:ID:       03996339-e8a8-4bf4-a5b3-65bbacbb7148
:END:
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

#+RESULTS:

** TODO dashboard
:PROPERTIES:
:ID:       96bf361b-63b5-42b9-a1fc-aeba51218bd5
:END:
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (global-set-key (kbd "C-c d") '(lambda () (interactive) (dashboard-open)))
    (setq dashboard-banner-logo-title "")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items '((recents  . 5)
			    (bookmarks . 5)
			    (projects . 5)
			    (agenda . 5)))
    (setq dashboard-display-icons-p t)
    (setq dashboard-icon-type 'nerd-icons)
    (setq dashboard-startup-banner '("~/.voi.d/banners/blackhole-lines.svg" . "~/.voi.d/banners/blackhole-lines.txt"))
    (setq dashboard-item-names '(("Recent Files:" . "  RECENT")
				 ("Bookmarks:" . "  BOOKMARKS")
				 ("Projects:" . "  PROJECTS")
				 ("Agenda for the coming week:" . "  AGENDA")))
    (setq dashboard-footer-messages '(
				      "voidmacs"
				      ))
    (setq dashboard-projects-switch-function 'projectile-persp-switch-project))
    ;; (setq dashboard-set-navigator t)
    ;; (setq dashboard-navigator-buttons
    ;; 	`(

    ;; 	  ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
    ;; 	    "Homepage"
    ;; 	    "Browse homepage"
    ;; 	    (lambda (&rest _) (browse-url "homepage")))
    ;; 	   ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
    ;; 	   ("?" "" "?/h" #'show-help nil "<" ">"))

    ;; 	  ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
    ;; 	    "Linkedin"
    ;; 	    ""
    ;; 	    (lambda (&rest _) (browse-url "homepage")))
    ;; 	   ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error)))))
#+end_src

#+RESULTS:

** ace popup menu
:PROPERTIES:
:ID:       fa6cc2ac-69b5-4c9d-a59a-f19e61304d28
:END:
#+begin_src emacs-lisp
  (use-package ace-popup-menu
    :init
    (ace-popup-menu-mode 1))
#+end_src

#+RESULTS:

** pulsar
:PROPERTIES:
:ID:       364ad49b-e409-4523-93d4-3b99b89e5e29
:END:
#+begin_src emacs-lisp
  (use-package pulsar
    :init
    (pulsar-global-mode t)
    (setq pulsar-pulse t)
    (setq pulsar-delay 0.055)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'pulsar-magenta)
    (setq pulsar-highlight-face 'pulsar-yellow)
    (let ((map global-map))
      (define-key map (kbd "C-c h p") #'pulsar-pulse-line)
      (define-key map (kbd "C-c h h") #'pulsar-highlight-line))
    (add-hook 'next-error-hook #'pulsar-pulse-line)
    (add-hook 'imenu-after-jump-hook #'pulsar-recenter-top)
    (add-hook 'imenu-after-jump-hook #'pulsar-reveal-entry))
#+end_src

#+RESULTS:

** elpy
:PROPERTIES:
:ID:       bc2bcffb-2610-427f-805b-227326651fa5
:END:
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+end_src

#+RESULTS:

** minimap
:PROPERTIES:
:ID:       03e074c3-8991-43ce-a0a2-ce9fdf51353b
:END:
#+begin_src emacs-lisp
  (use-package minimap
    :init
    (setq minimap-window-location 'right)
    (global-set-key (kbd "C-c m") '(lambda () (interactive) (minimap-mode))))
#+end_src

#+RESULTS:

** unicode
:PROPERTIES:
:ID:       5bfa09ba-11a9-4ee0-a62a-f0886c9df1ba
:END:
#+begin_src emacs-lisp
  (use-package unicode-fonts
    :init
    (unicode-fonts-setup))
#+end_src

#+RESULTS:

** amx
:PROPERTIES:
:ID:       d3e6ebfc-a8eb-4692-bbf8-0cac04473cdc
:END:
#+begin_src emacs-lisp
  (use-package amx
    :init
    (amx-mode 1))
#+end_src

#+RESULTS:

** ido completing read
:PROPERTIES:
:ID:       21a3c662-b051-42fb-841d-59aab15db17c
:END:
#+begin_src emacs-lisp
  (use-package ido-completing-read+
    :init
    (ido-ubiquitous-mode 1))
#+end_src

#+RESULTS:

** lsp
:PROPERTIES:
:ID:       8e035d7e-6f53-4626-805d-ad01c71faeca
:END:
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook (
	   (python-mode . lsp-deferred)
	   (sh-mode . lsp-deferred)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

#+RESULTS:

** elpher
:PROPERTIES:
:ID:       1f1b47fa-c116-4f27-854e-9e6400830ae3
:END:
#+begin_src emacs-lisp
  (use-package elpher)
#+end_src

#+RESULTS:

** elfeed
:PROPERTIES:
:ID:       a122c115-bba2-44cb-906d-53fdbe904822
:END:
#+begin_src emacs-lisp
  (use-package elfeed)
#+end_src

#+RESULTS:

** solaire
:PROPERTIES:
:ID:       a02f6f97-902c-42c5-9bef-4cf0d2c1e709
:END:
#+begin_src emacs-lisp
  (use-package solaire-mode
    :init
    (solaire-global-mode +1))
#+end_src

#+RESULTS:

** indent guide
:PROPERTIES:
:ID:       5942044f-3d2a-4f0f-972d-4bdf6e65a4b9
:END:
#+begin_src emacs-lisp
  (use-package indent-guide
    :init
    (indent-guide-global-mode))
#+end_src

#+RESULTS:

** emamux 
:PROPERTIES:
:ID:       7ffd8d2e-cd03-4603-a63f-ebb8396d62f7
:END:
#+begin_src emacs-lisp
  (use-package emamux
    :bind
    ("C-c c" . emamux:send-region))
#+end_src

#+RESULTS:

** pdf
:PROPERTIES:
:ID:       ae50cb38-7206-4199-8725-c8c3bea5184b
:END:
#+begin_src emacs-lisp
  (use-package pdf-tools)
#+end_src

#+RESULTS:

** smartparens
:PROPERTIES:
:ID:       43c79c53-ddc3-4193-a8a4-6d74e54f198b
:END:
#+begin_src emacs-lisp
  (use-package smartparens
    :init
    (smartparens-global-mode +1))
#+end_src

#+RESULTS:

** modern  
:PROPERTIES:
:ID:       e8321d05-41b2-412d-b850-4fe1474e1a1b
:END:
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :init
    (setq org-modern-label-border 'auto
	  org-modern-star nil
	  org-modern-hide-star nil
	  org-modern-block-name nil
	  org-modern-keyword nil
	  org-modern-timestamp t
	  org-modern-checkbox nil))
#+end_src

#+RESULTS:

** TODO xonsh
:PROPERTIES:
:ID:       ada127b3-e31e-46ee-9277-c386bb564d89
:END:
#+begin_src emacs-lisp
  ;; (defun org-babel-execute:xonsh (body params)
  ;;   (let ((in-file (org-babel-temp-file "xonsh-")))
  ;;    (with-temp-file in-file
  ;;       (insert body))
  ;;     (org-babel-eval
  ;;      (format "echo -e $($HOME/.pyenv/versions/3.11.4/bin/xonsh -c $(cat %s | sed \"s/^[[:space:]]*//g\"  | awk \"{print $1}\")) | sed \"s/\x1b\\[38;5;241m//g\" | sed \"s/\x1b\\[39m//g\" | sed -z \"/\n/d\" "
  ;;        (org-babel-process-file-name in-file))
  ;;      "")))))
  (use-package xonsh-mode)
#+end_src

#+RESULTS:
: org-babel-execute:xonsh

** brain
:PROPERTIES:
:ID:       da14fc89-2715-464b-990c-d82d379a5d6c
:END:
#+begin_src emacs-lisp
  (use-package org-brain :ensure t
    :init
    (setq org-brain-path "~/.voi.d/org/brain")
    (bind-key "C-c b" 'org-brain-prefix-map org-mode-map)
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.voi.d/org/brain/ids/.org-id-locations")
    (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
    (add-hook 'org-brain-visualize-mode-hook #'org-mode)
    (display-line-numbers-mode 0)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12)
    (setq org-brain-include-file-entries t
	  org-brain-file-entries-use-title nil))
#+end_src

#+RESULTS:

** pyenv
:PROPERTIES:
:ID:       48c0c967-56cd-4cf7-bfd7-10beb6b1f872
:END:
#+begin_src emacs-lisp
  (use-package pyenv-mode
    :init
    (pyenv-mode))
#+end_src

#+RESULTS:

** eshell 
:PROPERTIES:
:ID:       458c1b99-71e1-4431-9fed-a7ecffb31f2f
:END:
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook 'my-inhibit-global-linum-mode)
#+end_src

#+RESULTS:
| my-inhibit-global-linum-mode |

** term
:PROPERTIES:
:ID:       4f15feed-3d6f-4e17-a5fe-7246a11956a1
:END:
#+begin_src emacs-lisp
  (add-hook 'term-mode-hook 'my-inhibit-global-linum-mode)

  (defun my-inhibit-global-linum-mode ()
    (add-hook 'after-change-major-mode-hook
	      (lambda () (display-line-numbers-mode 0))
	      :append :local))
#+end_src

#+RESULTS:
: my-inhibit-global-linum-mode

** workgroups
:PROPERTIES:
:ID:       5ade54f4-29e4-47bc-a329-360945645f53
:END:
#+begin_src emacs-lisp
  (use-package workgroups2
    :init 
    (workgroups-mode 1)
    (setq wg-session-file "~/.voi.d/.emacs_workgroups")
    :bind
    ("C-c z" . wg-prefix-key))  
#+end_src

#+RESULTS:

** origami
:PROPERTIES:
:ID:       f19b3db9-49d9-441a-8ab5-b5d333249f1f
:END:
#+begin_src emacs-lisp
  (use-package origami
    :init
    (global-origami-mode 1)
    :bind
    ("C-<tab>" . origami-recursively-toggle-node))
#+end_src

#+RESULTS:

** hl defined
:PROPERTIES:
:ID:       e12d044e-4a13-4186-b4ad-cd9976a8b881
:END:
#+begin_src emacs-lisp
  (use-package highlight-defined
  :init
  (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode)
  (add-hook 'org-mode-hook 'highlight-defined-mode))
#+end_src

#+RESULTS:

** elmacro
:PROPERTIES:
:ID:       4c7b06d9-f72a-4438-a886-6eb0ccbfd586
:END:
#+begin_src emacs-lisp
  (use-package elmacro
    :init
    (elmacro-mode))
#+end_src

#+RESULTS:

** eros
:PROPERTIES:
:ID:       cdfe2c0a-f5d6-4671-9c3e-c850540f3133
:END:
#+begin_src emacs-lisp
  (use-package eros
    :init
    (eros-mode 1))
#+end_src

#+RESULTS:

* bindings
:PROPERTIES:
:ID:       2df62463-b697-473d-9510-3e38ac30bb19
:END:
#+begin_src emacs-lisp
  (windmove-default-keybindings)
  (setq tab-always-indent 'complete)
  (global-set-key (kbd "C-c t") '(lambda () (interactive) (eshell)))
  (global-set-key (kbd "C-c f") '(lambda () (interactive) (find-file "~/.voi.d/org/brain/config.org")))
  (global-set-key (kbd "C-c x") '(lambda () (interactive) (find-file "~/.voi.d/org/brain/xonsh.org")))
  (global-set-key (kbd "C-c s") '(lambda () (interactive) (find-file "~/.voi.d/org/brain/bash.org")))
  (global-set-key (kbd "C-c i") '(lambda () (interactive) (find-file "~/.voi.d/org/brain/init.org")))
  (global-set-key (kbd "C-x a") '(lambda () (interactive) (insert-timestamp)))
  (global-set-key (kbd "C-x C-l") '(lambda () (interactive) (org-toggle-timestamp-type)))
  (global-set-key (kbd "C-x s") '(lambda () (interactive) (save-buffer)))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (save-buffer) |

* fonts
:PROPERTIES:
:ID:       2235f497-9773-4d7a-a15e-6be1cc751f7e
:END:
#+begin_src emacs-lisp
  (set-face-attribute 'default t
		      :font "Fira Code"
		      :height 110
		      :weight 'medium)
  (set-face-attribute 'variable-pitch t
		      :font "Lato"
		      :height 110
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch t
		      :font "JetBrains Mono"
		      :height 110
		      :weight 'medium)
  (set-face-attribute 'font-lock-comment-face t
		      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face t
		      :slant 'italic)

  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

  (setq-default line-spacing 0.12)
#+end_src

#+RESULTS:
: 0.12

* org
:PROPERTIES:
:ID:       6b6d8382-ecc4-40f1-8bee-c0dad5789073
:END:
#+begin_src emacs-lisp
  (setq org-directory "~/.voi.d/org/")
  (setq org-agenda-files (quote ("~/.voi.d/org/brain/agenda/")))
  (setq org-catch-invisible-edits 'show-and-error)
  (setq org-special-ctrl-a/e t)
  (setq org-insert-heading-respect-content t)
  (add-hook 'after-save-hook (lambda () (org-babel-tangle)))
  (org-babel-tangle-file "~/.voi.d/org/brain/xonsh.org")
  (org-babel-tangle-file "~/.voi.d/org/brain/bash.org")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)
     (lilypond . t)))
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("emacs-lisp" "python" "bash" "lilypond" "xonsh"))))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
  (electric-indent-mode -1)
  (defun org-icons ()
    (setq prettify-symbols-alist '(("#+begin_src" . "❱")
				   ("#+end_src" . "❰")
				   ("#+RESULTS:" . "∴")
				   ("#+begin_example" . "⋉")
				   ("#+end_example" . "⋊")
				   (":PROPERTIES:" . "")
				   (":ID:" . "") ;; ??
				   (":END:" . "―")
				   ("#+startup:" . "")
				   ("#+title:" . "")
				   ("#+author:" . "")
				   ("#+header:" . "")
				   ("#+name:" . "")
				   ("#+filetags:" . "")
				   ("#+description:" . "")
				   ("#+subtitle:" . "⛛")
				   ("#+options:" . "⚒")
				   ("[ ]" . "")
				   ("[X]" . "")
				   ("[-]" . ""))))
  (add-hook 'org-mode-hook 'org-icons)
#+end_src

#+RESULTS:
| highlight-defined-mode | org-modern-mode | elpher-org-mode-integration | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (closure (t) nil (org-bullets-mode 1)) | toc-org-enable | org-icons | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* gui
:PROPERTIES:
:ID:       eadb255d-5091-43c9-981b-36b4fcb59b81
:END:
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)
  (size-indication-mode t)
  (global-display-line-numbers-mode 0)
  (global-visual-line-mode t)
  (global-prettify-symbols-mode t)
#+end_src

#+RESULTS:
: t

* footer
:PROPERTIES:
:ID:       6582c00b-9624-4e22-b0ed-ddf1d9e637cd
:END:
#+begin_src emacs-lisp
  (provide 'config)
  ;;; init.el ends here
#+end_src

#+RESULTS:
: config
