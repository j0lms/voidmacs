#+title: Voidmacs Config
#+author: j0lms
#+description: Personal config
#+startup: overview
#+options: toc:2
* Contents :toc:
- [[#preamble][Preamble]]
- [[#bootstrap][Bootstrap]]
  - [[#early][Early]]
  - [[#init][Init]]
  - [[#scripts][Scripts]]
- [[#theme][Theme]]
- [[#fonts][Fonts]]
- [[#packages][Packages]]
  - [[#completion][Completion]]
  - [[#cursor][Cursor]]
  - [[#dashboard][Dashboard]]
  - [[#deadgrep][Deadgrep]]
  - [[#diffhl][Diffhl]]
  - [[#docker][Docker]]
  - [[#eglot][Eglot]]
  - [[#elisp][Elisp]]
  - [[#flycheck][Flycheck]]
  - [[#git][Git]]
  - [[#go][Go]]
  - [[#highlight][Highlight]]
  - [[#hungry][Hungry]]
  - [[#icons][Icons]]
  - [[#indent][Indent]]
  - [[#ligatures][Ligatures]]
  - [[#markdown][Markdown]]
  - [[#minimap][Minimap]]
  - [[#modeline][Modeline]]
  - [[#org][Org]]
  - [[#origami][Origami]]
  - [[#pretty][Pretty]]
  - [[#projectile][Projectile]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#shell][Shell]]
  - [[#smart][Smart]]
  - [[#snippets][Snippets]]
  - [[#tabs][Tabs]]
  - [[#treemacs][Treemacs]]
  - [[#undo][Undo]]
  - [[#unicode][Unicode]]
  - [[#web][Web]]
  - [[#which][Which]]
- [[#misc][Misc]]
  - [[#variables][Variables]]
  - [[#functions][Functions]]
- [[#bindings][Bindings]]
  - [[#settings][Settings]]
  - [[#general][General]]
  - [[#global][Global]]
- [[#gui][GUI]]
- [[#footer][Footer]]

* Preamble
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
;;; config.el --- Emacs config file -\*- lexical-binding: t; -\*-

;; Version: 0.1.0

;;; Commentary:

;; This file is tangled from ~/.emacs.d/org/config.org

;;; Code:
#+end_src
* Bootstrap
** Early
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;;; early-init.el --- Emacs early init file -\*- lexical-binding: t; -\*-

;;; Commentary:

;; This file is tangled from ~/.emacs.d/org/config.org

;;; Code:

(setq package-enable-at-startup nil)

;; Local Variables:
;; no-byte-compile: t
;; no-native-compile: t
;; no-update-autoloads: t
;; End:

(provide 'early-init)
;;; early-init.el ends here
#+end_src
** Init
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
;;; init.el --- Emacs init file -\*- lexical-binding: t; -\*-

;;; Commentary:

;; This file is tangled from ~/.emacs.d/org/config.org

;;; Code:

(set 'linuxp (when (eq system-type 'gnu/linux) "yes"))
(set 'windowp (when (eq system-type 'windows-nt) "yes"))
(set 'androidp (when  (eq system-type 'android) "yes"))

(defun emacs-version-greater-or-equal (major minor)
  "Return t if current Emacs version is >= MAJOR.MINOR."
  (let ((target (version-to-list (format "%d.%d" major minor)))
        (current (version-to-list emacs-version)))
    (version-list-<= target current)))

(defun is-wsl-linux ()
  "Return t if running in a WSL Linux."
  (and (string= linuxp "yes")
       (or (getenv "WSL_DISTRO_NAME")
           (getenv "WSL_INTEROP"))))

(defun is-android ()
  "Return t if running on Android."
  (string= androidp "yes"))

(defun is-windows ()
  "Return t if running on Windows."
  (string= windowp "yes"))

(defun is-linux ()
  "Return t if running on Linux."
  (string= linuxp "yes"))

(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

(when (is-wsl-linux)
  (setq comp-native-comp-async-report-errors nil)
  (setq comp-native-comp-async-jobs 0)
  (setq native-comp-deferred-compilation nil))

(org-babel-load-file
 (expand-file-name
  "~/.emacs.d/config.el"
  user-emacs-directory))

;; Local Variables:
;; no-byte-compile: t
;; no-native-compile: t
;; no-update-autoloads: t
;; End:

(provide 'init)
;;; init.el ends here
#+end_src
** Scripts
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(defvar my-lisp-directory "~/.emacs.d/lisp/")
(defvar my-site-lisp-directory "~/.emacs.d/site-lisp/")

(add-to-list 'load-path my-lisp-directory)
(add-to-list 'load-path my-site-lisp-directory)

(let ((scripts-dir my-lisp-directory))
  (dolist (file (directory-files scripts-dir nil "^[^.]*\\.el$"))
    (let ((filename (file-name-sans-extension file)))
      (require (intern filename)))))

(setq use-package-always-ensure t)

(setq custom-file (expand-file-name "~/.emacs.d/custom.el" user-emacs-directory))

(add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))
#+end_src
* Theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

(defvar my-theme-loaded nil)

(defun my-load-theme-based-on-frame (frame)
  "Load theme based on environment, only once."
  (unless my-theme-loaded
    (with-selected-frame frame
      (if (is-wsl-linux)
          (load-theme `modus-vivendi t)
        (load-theme `wilmersdorf t))
      (setq my-theme-loaded t))))

(if (daemonp)
    (add-hook 'after-make-frame-functions #'my-load-theme-based-on-frame)
  (my-load-theme-based-on-frame (selected-frame)))
#+end_src
* Fonts
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(setq text-scale-mode-step 1.2)

(defvar font-height 110)

(defvar my-font-scaling-steps 0
  "Keeps track of the number of text scaling steps taken.")

(defface dashboard-navigator-non-italic
  '((t (:inherit font-lock-keyword-face :slant normal)))
  "Face used for the dashboard navigator (non-italic)."
  :group 'dashboard)

(defun my-find-available-font (font-list)
  "Return the first font name from FONT-LIST that is available on the system."
  (or (cl-find-if (lambda (font-name)
                    (find-font (font-spec :name font-name)))
                  font-list)
      (car font-list)))

(defun my-configure-fonts ()
  "Sets the initial base font attributes for various faces."
  (interactive)
  (let ((base-height font-height)
        (default-font-family (my-find-available-font '("FiraCode Nerd Font Mono" "DejaVu Sans Mono" "Monospace" "Courier New")))
        (variable-pitch-family (my-find-available-font '("Inter" "Roboto" "Segoe UI" "Helvetica" "DejaVu Sans" "Sans" "Arial")))
        (comment-keyword-family (my-find-available-font '("RobotoMono Nerd Font" "DejaVu Sans Mono" "Monospace" "Courier New")))
        (symbol-font-family (my-find-available-font '("JetBrainsMono NF" "Symbola" "Noto Sans Symbols2" "Monospace")))
        (modeline-font-family (my-find-available-font '("FiraCode Nerd Font Mono" "DejaVu Sans Mono" "Monospace" "Courier New"))))

    (set-face-attribute 'default nil
                        :font default-font-family
                        :height base-height
                        :weight 'medium)

    (set-face-attribute 'variable-pitch nil
                        :font variable-pitch-family
                        :height base-height
                        :weight 'medium)

    (set-face-attribute 'fixed-pitch nil
                        :font default-font-family
                        :height base-height
                        :weight 'medium)

    (set-face-attribute 'font-lock-comment-face nil
                        :font comment-keyword-family
                        :height base-height
                        :slant 'italic
                        :weight 'medium)

    (set-face-attribute 'font-lock-keyword-face nil
                        :font comment-keyword-family
                        :height base-height
                        :slant 'italic
                        :weight 'bold)

    (set-face-attribute 'mode-line nil
                        :font modeline-font-family
                        :height base-height
                        :weight 'medium)

    (set-face-attribute 'mode-line-buffer-id nil
                        :font modeline-font-family
                        :height base-height
                        :weight 'bold)

    (set-face-attribute 'highlight nil
                        :font default-font-family
                        :height base-height
                        :weight 'medium)

    (set-face-attribute 'shadow nil
                        :font default-font-family
                        :height base-height
                        :weight 'medium)

    (set-face-attribute 'minibuffer-prompt nil
                        :font default-font-family
                        :height base-height
                        :weight 'bold)

    (set-face-attribute 'dashboard-navigator-non-italic nil
                        :font default-font-family
                        :height (round (* base-height 1.25))
                        :weight 'bold)

    (when (fboundp 'set-fontset-font)
      (set-fontset-font t #x2227 symbol-font-family nil 'prepend)    ;; (logical and)
      (set-fontset-font t #x2228 symbol-font-family nil 'prepend)))) ;; (logical or)

(defvar my-original-face-heights nil
  "Alist of cons cells (face . height) storing *unscaled* face heights..")

(defun my-capture-original-face-heights ()
  "Capture the current 'base' height of faces that will be scaled."
  (setq my-original-face-heights nil)
  (dolist (face '(default
                  variable-pitch
                  fixed-pitch
                  font-lock-comment-face
                  font-lock-keyword-face
                  mode-line
                  mode-line-buffer-id
                  highlight
                  shadow
                  minibuffer-prompt
                  dashboard-navigator-non-italic))
    (let ((current-face-height (face-attribute face :height nil t)))
      (unless (integerp current-face-height)
        (setq current-face-height font-height))
      (push (cons face current-face-height) my-original-face-heights))))

(defun my-scale-all-managed-faces (total-scale-factor)
  "Scale all faces tracked in `my-original-face-heights' by TOTAL-SCALE-FACTOR."
  (unless my-original-face-heights
    (my-capture-original-face-heights))

  (dolist (pair my-original-face-heights)
    (let* ((face (car pair))
           (original-height (cdr pair))
           (new-height (max 1 (round (* original-height total-scale-factor)))))
      (when (get face 'face)
        (set-face-attribute face nil :height new-height)))))

(defun my-text-scale-update-modeline ()
  "Force an update of the modeline in all windows."
  (let ((all-windows (if (fboundp 'live-windows)
                         (live-windows)
                       (window-list))))

    (dolist (window all-windows)
      (with-selected-window window
        (force-mode-line-update)))))

(defun my-text-scale-increase-all-faces (&optional arg)
  (interactive "P")
  (let ((steps (if arg (prefix-numeric-value arg) 1)))
    (setq my-font-scaling-steps (+ my-font-scaling-steps steps))
    (let ((total-scale-factor (expt text-scale-mode-step my-font-scaling-steps)))
      (my-scale-all-managed-faces total-scale-factor))
    (my-text-scale-update-modeline)))

(defun my-text-scale-decrease-all-faces (&optional arg)
  (interactive "P")
  (let ((steps (if arg (prefix-numeric-value arg) 1)))
    (setq my-font-scaling-steps (- my-font-scaling-steps steps))
    (let ((total-scale-factor (expt text-scale-mode-step my-font-scaling-steps)))
      (my-scale-all-managed-faces total-scale-factor))
    (my-text-scale-update-modeline)))

(defun my-text-scale-reset-all-faces ()
  (interactive)
  (when (/= my-font-scaling-steps 0)
    (setq my-font-scaling-steps 0)
    (my-configure-fonts)
    (my-capture-original-face-heights)
    (my-text-scale-update-modeline)))

(my-configure-fonts)
(my-capture-original-face-heights)

(add-hook 'server-after-make-frame-hook
          (lambda (&rest _)
            (my-configure-fonts)
            (my-capture-original-face-heights)
            (my-scale-all-managed-faces (expt text-scale-mode-step my-font-scaling-steps))))

(add-hook 'elpaca-after-init-hook
          (lambda (&rest _)
            (my-configure-fonts)
            (my-capture-original-face-heights)
            (my-scale-all-managed-faces (expt text-scale-mode-step my-font-scaling-steps))))
#+end_src
* Packages
** Completion
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package corfu
  :defer t
  :custom
  (corfu-cycle t)
  (corfu-quit-at-boundary nil)
  (corfu-quit-no-match nil)
  (corfu-preview-current nil)
  (corfu-preselect 'prompt)
  (corfu-on-exact-match nil)
  (corfu-popupinfo-delay '(0.25 . 0.1))
  (corfu-popupinfo-hide nil)
  :init
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode))

(when (not (emacs-version-greater-or-equal 31 0))
  (use-package corfu-terminal
    :after corfu
    :config
    (corfu-terminal-mode +1)))

(use-package cape
  :defer t
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-line)
  :custom
  (cape-dict-file "~/.emacs.d/misc/english-words.txt"))

(use-package orderless
  :defer t
  :commands (orderless-filter)
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
	orderless-component-separator "[ ,]"
        completion-category-overrides '((file (styles . (partial-completion))))))

(unless (is-android)
  (use-package fzf-native
    :ensure
    (:repo "dangduc/fzf-native"
           :host github
           :files (:defaults "bin"))
    :config
    (fzf-native-load-dyn)
    (setq fussy-score-fn 'fussy-fzf-native-score))

  (use-package fussy
    :config
    (setq fussy-score-ALL-fn 'fussy-fzf-score)
    (setq fussy-filter-fn 'fussy-filter-orderless-flex)
    (setq fussy-use-cache t)
    (setq fussy-compare-same-score-fn 'fussy-histlen->strlen<)
    (fussy-setup)
    (fussy-eglot-setup))

  (advice-add 'corfu--capf-wrapper :before 'fussy-wipe-cache))

(use-package consult
  :defer t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  :config
  (setq consult-project-root-function #'projectile-project-root))

(use-package consult-flycheck
  :defer t)

(savehist-mode 1)
(add-to-list 'savehist-additional-variables 'corfu-history)

(use-package vertico
  :defer t
  :bind (:map minibuffer-local-map
              ("C-<backspace>" . backward-kill-word))
  :custom
  (vertico-cycle t)
  (vertico-count 10)
  :config
  (set-face-attribute 'vertico-current nil
                      :background "#41454b"
                      :foreground "#d3d3d3"
                      :extend t)
  :init
  (vertico-mode))

(use-package marginalia
  :after vertico
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode)
  :config
  (set-face-attribute 'marginalia-file-priv-dir nil :inherit 'font-lock-keyword-face :slant 'normal))

(use-package embark
  :defer t
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  (set-face-attribute 'embark-keybinding nil :foreground "#819cd6")
  (define-key embark-org-src-block-map "i" #'my-org-fix-block-indentation))

(use-package embark-consult
  :after embark
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Cursor
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package multiple-cursors
  :defer t)
#+end_src
** Dashboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(unless (is-android)
  (use-package dashboard
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook)
    (setq dashboard-startupify-list
	  '(dashboard-insert-banner
	    dashboard-insert-newline
	    dashboard-insert-banner-title
	    dashboard-insert-newline
	    dashboard-insert-navigator
	    dashboard-insert-newline
	    dashboard-insert-init-info
	    dashboard-insert-items
	    dashboard-insert-newline
	    dashboard-insert-footer)
	  dashboard-navigator-buttons
	  `(((" " "GitHub" "Browse homepage"
	      (lambda (&rest _) (browse-url "https://github.com/j0lms/voidmacs")) dashboard-navigator-non-italic)
	     (" " "Config" "Open config"
	      (lambda (&rest _) (find-file "~/.emacs.d/org/config.org")) dashboard-navigator-non-italic)
	     ("󰶕 " "Restart" "Restart Emacs"
	      (lambda (&rest _) (restart-emacs)) dashboard-navigator-non-italic)))
	  dashboard-display-icons-p t
	  dashboard-icon-type 'nerd-icons
	  dashboard-banner-logo-title "o̊"
	  dashboard-center-content t
	  dashboard-path-style 'truncate-middle
	  dashboard-path-max-length 60
	  dashboard-items '((recents  . 7) (projects  . 4))
	  dashboard-item-names '(("Recent Files:" . "󱒔  RECENT") ("Projects:" . "  PROJECTS"))
	  dashboard-startup-banner '("~/.emacs.d/banners/blackhole-lines.svg" . "~/.emacs.d/banners/blackhole-lines.txt")
	  dashboard-footer-icon " "
	  dashboard-footer-messages '("v󰎍idmacs")
	  dashboard-projects-backend 'projectile
	  dashboard-projects-switch-function 'projectile-persp-switch-project)))

(when (is-android)
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t
          dashboard-show-shortcuts nil
	  dashboard-banner-logo-title "o̊"
	  dashboard-items '((recents  . 7) (projects  . 4))
	  dashboard-item-names '(("Recent Files:" . "RECENT") ("Projects:" . "PROJECTS"))
          dashboard-startup-banner '("~/.emacs.d/banners/blackhole-lines.txt")
	  dashboard-footer-messages '("v⭘idmacs")
	  dashboard-footer-icon " "
	  dashboard-projects-backend 'projectile
	  dashboard-projects-switch-function 'projectile-persp-switch-project)))
#+end_src
** Deadgrep
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package deadgrep
  :defer t)
#+end_src
** Diffhl
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package diff-hl
  :defer t
  :init
  (global-diff-hl-mode +1)
  :config
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src
** Docker
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package dockerfile-mode
  :defer t
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src
** Eglot
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(when (emacs-version-greater-or-equal 29 1)
  (setq eglot-server-programs
        '((python-mode . ("python" "-m" "pylsp"))))

  (add-hook 'python-mode-hook 'eglot-ensure)

  (setq eglot-autoshutdown t
        eglot-events-buffer-size 0
        eglot-send-changes-idle-time 0.5))
#+end_src
** Elisp
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package highlight-quoted
  :defer t
  :hook
  (emacs-lisp-mode . highlight-quoted-mode))

(use-package eros
  :defer t
  :hook
  (emacs-lisp-mode . eros-mode))

(use-package suggest
  :defer t)

(use-package ipretty
  :defer t
  :config
  (ipretty-mode 1))

(use-package nameless
  :defer t
  :hook
  (emacs-lisp-mode .  nameless-mode)
  :custom
  (nameless-global-aliases '())
  (nameless-private-prefix t))

(use-package erefactor
  :defer t)

(use-package elmacro
  :defer t
  :init
  (elmacro-mode))
#+end_src
** Flycheck
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package flycheck
  :defer t
  :diminish
  :init
  (global-flycheck-mode)
  (setq  flycheck-python-flake8-executable "python"
	 flycheck-python-pycompile-executable "python"
	 flycheck-python-ruff-executable "python"
	 flycheck-python-pyright-executable "python"))

(defun flycheck-parse-output (output checker buffer)
  (let ((sanitized-output
	 (replace-regexp-in-string "\r" "" output)))
    (funcall (flycheck-checker-get checker 'error-parser) sanitized-output checker buffer)))

(when (emacs-version-greater-or-equal 29 1)
  (use-package flycheck-eglot
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1)))

(use-package flycheck-posframe
  :after flycheck
  :config
  (setq	flycheck-display-errors-delay 0.5
	flycheck-idle-change-delay 0
	flycheck-idle-buffer-switch-delay 0)

  (flycheck-posframe-configure-pretty-defaults)

  (set-face-attribute 'flycheck-posframe-background-face nil :background "#333333")
  (set-face-attribute 'flycheck-posframe-border-face nil :foreground "#333333")

  (setq flycheck-posframe-border-width 3)

  (defun my-flycheck-posframe-monitor-post-command ()
    "Hide flycheck-posframe if cursor position or buffer changes."
    (when (not (flycheck-posframe-check-position))
      (posframe-hide flycheck-posframe-buffer)))

  (defun my-fix-flycheck-posframe-hide-immediately ()
    "Toggle post-command-hook for immediate flycheck-posframe hiding."
    (if flycheck-posframe-mode
	(add-hook 'post-command-hook #'my-flycheck-posframe-monitor-post-command nil t)
      (remove-hook 'post-command-hook #'my-flycheck-posframe-monitor-post-command t)))

  (add-hook 'flycheck-posframe-mode-hook #'my-fix-flycheck-posframe-hide-immediately)
  (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
  (setq flycheck-echo-errors-in-minibuffer nil))

(use-package flycheck-golangci-lint
  :defer t
  :hook (go-mode . flycheck-golangci-lint-setup))
#+end_src
** Git
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package git-timemachine)

(defun +elpaca-unload-seq (e)
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

(defun +elpaca-seq-build-steps ()
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps elpaca-build-steps))
          (list '+elpaca-unload-seq 'elpaca--activate-package)))

(elpaca `(seq :build ,(+elpaca-seq-build-steps)))

(use-package transient
  :defer t)

(use-package casual
  :defer t)

(use-package magit
  :defer t
  :init
  (with-eval-after-load 'magit-mode
    (add-hook 'after-save-hook 'magit-after-save-refresh-status t))
  :config
  (setq magit-diff-options '("-b"))
  (add-hook 'magit-mode-hook #'diff-hl-mode))

(use-package magit-todos
  :defer t)

(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)

(defun dt-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "n" 'ediff-next-difference)
  (define-key ediff-mode-map "p" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'dt-ediff-hook)
#+end_src
** Go
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package go-mode
  :defer t
  :mode "\\.go\\'"
  :hook
  (go-mode-hook
   . (lambda ()
       (add-hook 'before-save-hook #'gofmt-before-save t t))))
#+end_src
** Highlight
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package hl-todo
  :defer t
  :init
  (global-hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
        '(("TODO"   . "#add8e6")
          ("FIXME"  . "#ffa07a")
          ("DEBUG"  . "#98fb98")
          ("GOTCHA" . "#f0e68c")
          ("STUB"   . "#d8bfd8"))))

(with-eval-after-load 'magit
  (add-hook 'magit-log-wash-summary-hook
            #'hl-todo-search-and-highlight t)
  (add-hook 'magit-revision-wash-message-hook
            #'hl-todo-search-and-highlight t))

(use-package highlight-numbers
  :defer t
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-escape-sequences
  :defer t
  :hook (prog-mode . hes-mode))

(use-package volatile-highlights
  :defer t
  :init
  (volatile-highlights-mode t)
  :custom
  (set-face-attribute 'vhl/default-face nil :foreground "#c6c6c6" :background "#89b4fa")
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree))

(use-package beacon
  :defer t
  :init
  (beacon-mode 1)
  :config
  (setq beacon-blink-when-window-scrolls nil
	beacon-blink-when-window-changes t
	beacon-blink-when-point-moves nil
	beacon-color "#cccccc"))
#+end_src
** Hungry
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package hungry-delete
  :defer t
  :init
  (global-hungry-delete-mode)
  :config
  (setq hungry-delete-join-reluctantly nil)
  (setq-default hungry-delete-chars-to-skip " \t\f\v\n"))

(delete-selection-mode 1)
#+end_src
** Icons
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(unless (is-android)
  (use-package all-the-icons
    :defer t
    :if (display-graphic-p))

  (use-package nerd-icons
    :defer t)

  (use-package nerd-icons-ibuffer
    :defer t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-dired
    :defer t
    :hook
    (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)))
#+end_src
** Indent
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package indent-guide
  :defer t
  :init
  (indent-guide-global-mode))
#+end_src
** Ligatures
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package ligature
  :config
  (ligature-set-ligatures 't '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                               ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                               "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                               "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" "/*" "/**"
                               "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                               "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                               "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                               "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                               "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                               "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
  (global-ligature-mode 't))
#+end_src
** Markdown
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package markdown-mode
  :defer t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :bind (:map markdown-mode-map
         ("C-c C-e" . markdown-do)))

(use-package pandoc-mode
  :defer t
  :hook ((markdown-mode . pandoc-mode)))
#+end_src
** Minimap
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package minimap
  :defer t
  :init
  (setq minimap-window-location 'right))
#+end_src
** Modeline
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(defun my-modeline-scaling-indicator ()
  "Return a string indicating the current text scaling step for the modeline."
  (let ((step my-font-scaling-steps))
    (cond ((> step 0) (format "[+%d]" step))
          ((< step 0) (format "[%d]" step))
          (t ""))))

(unless (is-android)
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :config
    (doom-modeline-def-segment my-scaling-indicator
      "Returns the text for the scaling indicator."
      (my-modeline-scaling-indicator))
    (setq doom-modeline-buffer-file-name-style 'truncate-with-project
	  doom-modeline-window-width-limit nil
	  doom-modeline-vcs-max-length 10
	  doom-modeline-icon t
	  nerd-icons-scale-factor 1)
    (doom-modeline-def-modeline 'main
      '(eldoc bar window-state workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)
      '(compilation objed-state misc-info project-name persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs check time my-scaling-indicator "  "))))

(when (is-android)
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-buffer-file-name-style 'truncate-with-project
	  doom-modeline-window-width-limit nil
	  doom-modeline-icon nil
	  doom-modeline-vcs-max-length 10)))
#+end_src
** Org
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package org-bullets
  :defer t
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package toc-org
  :defer t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))

(unless (is-android)
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :init
    (setq org-modern-label-border 'auto
	  org-modern-star nil
	  org-modern-hide-star nil
	  org-modern-block-name nil
	  org-modern-keyword nil
	  org-modern-timestamp t
	  org-modern-checkbox nil)))

(eval-after-load 'org
  (progn
    (define-key org-mode-map (kbd "<C-S-up>") nil)
    (define-key org-mode-map (kbd "<C-S-down>") nil)
    (define-key org-mode-map (kbd "<C-S-left>") nil)
    (define-key org-mode-map (kbd "<C-S-right>") nil)))

(setq org-directory "~/.emacs.d/org/"
      org-return-follows-link t
      org-hide-emphasis-markers t
      org-pretty-entities t
      org-startup-with-inline-images t
      org-hide-emphasis-markers t
      org-list-allow-alphabetical t
      org-edit-src-content-indentation 0)

(defun my-org-comment-dwim (&optional arg)
  (interactive "P")
  (or (org-babel-do-key-sequence-in-edit-buffer (kbd "M-;"))
      (comment-dwim arg)))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(add-hook 'after-save-hook
          (lambda ()
            (when (derived-mode-p 'org-mode)
              (org-babel-tangle))))

(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("emacs-lisp" "python" "powershell"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

(unless (is-android)
  (defun org-icons ()
    (setq prettify-symbols-alist '(("#+begin_src" . "❱")
				   ("#+end_src" . "❰")
				   ("#+RESULTS:" . "∴")
				   ("#+begin_example" . "⋉")
				   ("#+end_example" . "⋊")
				   (":PROPERTIES:" . "")
				   (":ID:" . "")
				   (":END:" . "----")
				   ("#+startup:" . "")
				   ("#+title:" . "")
				   ("#+author:" . "")
				   ("#+header:" . "")
				   ("#+name:" . "")
				   ("#+filetags:" . "")
				   ("#+description:" . "")
				   ("#+subtitle:" . "󰨗")
				   ("#+options:" . "󱕷")
				   ("#+call:" . "󰃷")
				   ("[ ]" . "")
				   ("[X]" . "")
				   ("[-]" . "")))
    (prettify-symbols-mode)))

(when (is-android)
  (defun org-icons ()
    (setq prettify-symbols-alist '(("#+begin_src" . "❱")
				   ("#+end_src" . "❰")
				   ("#+RESULTS:" . "∴")
				   ("#+begin_example" . "⋉")
				   ("#+end_example" . "⋊")
				   (":PROPERTIES:" . "☰")
				   (":END:" . "----")))
    (prettify-symbols-mode)))

(add-hook 'org-mode-hook 'org-icons)
(add-hook 'org-babel-after-execute-hook #'org-display-inline-images)

(defun my-org-face-heights ()
  "Apply custom height settings to Org mode outline levels."
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :height (cdr face))))

(my-org-face-heights)
(add-hook 'server-after-make-frame-hook #'my-org-face-heights)

(unless (is-wsl-linux)
  (defvar dw/org-roam-project-template
    '("p" "project" plain "** TODO %?"
      :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ${title}\n#+category: ${title}\n#+filetags: Project\n"
                             ("Tasks"))))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun dw/org-roam-goto-month ()
    (interactive)
    (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y-%B")) '(4))
                       :node (org-roam-node-create)
                       :templates '(("m" "month" plain "\n* Goals\n\n%?* Summary\n\n"
                                     :if-new (file+head "%<%Y-%B>.org"
							"#+title: %<%Y-%B>\n#+filetags: Project\n")
                                     :unnarrowed t))))

  (defun dw/org-roam-goto-year ()
    (interactive)
    (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y")) '(4))
                       :node (org-roam-node-create)
                       :templates '(("y" "year" plain "\n* Goals\n\n%?* Summary\n\n"
                                     :if-new (file+head "%<%Y>.org"
							"#+title: %<%Y>\n#+filetags: Project\n")
                                     :unnarrowed t))))

  (defun dw/org-roam-capture-task ()
    (interactive)
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates (list dw/org-roam-project-template)))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  (use-package org-roam
    :defer t
    :init
    (setq org-roam-v2-ack t)
    (setq dw/daily-note-filename "%<%Y-%m-%d>.org"
          dw/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
    :custom
    (org-roam-directory "~/.emacs.d/org/notes/roam/")
    (org-roam-dailies-directory "~/.emacs.d/org/notes/journal/")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
	:unnarrowed t)))
    (org-roam-dailies-capture-templates
     `(("d" "default" entry
	"* %?"
	:if-new (file+head ,dw/daily-note-filename
                           ,dw/daily-note-header))
       ("t" "task" entry
	"* TODO %?\n  %U\n  %a\n  %i"
	:if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Tasks"))
	:empty-lines 1)
       ("l" "log entry" entry
	"* %<%I:%M %p> - %?"
	:if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Log")))
       ("j" "journal" entry
	"* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
	:if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Log")))
       ("m" "meeting" entry
	"* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
	:if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Log")))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n d" . dw/org-roam-jump-menu/body)
           ("C-c n c" . org-roam-dailies-capture-today)
           ("C-c n t" . dw/org-roam-capture-task)
           ("C-c n g" . org-roam-graph)
           :map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n I" . org-roam-insert-immediate)))
    :config
    (org-roam-db-autosync-mode)

    (my/org-roam-refresh-agenda-list)))
#+end_src
** Origami
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package origami
  :defer t
  :bind
  ("C-<tab>" . origami-recursively-toggle-node)
  :hook
  (server-after-make-frame-hook . global-origami-mode))
#+end_src
** Pretty
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package pretty-mode
  :defer t
  :init
  (global-pretty-mode t)
  (add-hook 'my-pretty-language-hook 'turn-on-pretty-mode)
  :config
  (let ((symbols-to-remove '("->" "map" "/=" "!=" "=="
			     "<=" ">=" "&&" "||" "...")))
    (setq prettify-symbols-alist
          (dolist (symbol symbols-to-remove prettify-symbols-alist)
            (setq prettify-symbols-alist
                  (delq (assoc symbol prettify-symbols-alist)
                        prettify-symbols-alist))))))

(unless (is-android)
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode))))

(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode
         web-mode
         js2-mode))

(use-package rainbow-delimiters
  :defer t
  :hook ((prog-mode . rainbow-delimiters-mode)))

(use-package eshell-syntax-highlighting
  :after eshell-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(use-package diredfl
  :defer t
  :init
  (diredfl-global-mode 1)
  :config
  (set-face-attribute 'diredfl-file-name nil :inherit 'marginalia-file-name :background 'unspecified)
  (set-face-attribute 'diredfl-symlink nil :inherit 'font-lock-string-face :background 'unspecified)
  (set-face-attribute 'diredfl-exec-priv nil :inherit 'marginalia-file-priv-exec :background 'unspecified)
  (set-face-attribute 'diredfl-read-priv nil :inherit 'marginalia-file-priv-read :background 'unspecified)
  (set-face-attribute 'diredfl-write-priv nil :inherit 'marginalia-file-priv-write :background 'unspecified)
  (set-face-attribute 'diredfl-no-priv nil :inherit 'marginalia-file-priv-no :background 'unspecified)
  (set-face-attribute 'diredfl-link-priv nil :inherit 'marginalia-file-priv-link :background 'unspecified)
  (set-face-attribute 'diredfl-dir-priv nil :inherit 'font-lock-keyword-face :background 'unspecified :foreground 'unspecified :slant 'normal)
  (set-face-attribute 'diredfl-flag-mark-line nil :inherit 'warning :background 'unspecified)
  (set-face-attribute 'diredfl-deletion-file-name nil :inherit 'error :background 'unspecified)
  (set-face-attribute 'diredfl-deletion nil :inherit 'error :background 'unspecified)
  (set-face-attribute 'diredfl-number nil :foreground "#929292" :background 'unspecified)
  (set-face-attribute 'diredfl-dir-name nil :inherit 'font-lock-keyword-face :foreground "#c6c6c6" :background 'unspecified :slant 'normal)
  (set-face-attribute 'diredfl-file-name nil :foreground "#c6c6c6" :background 'unspecified)
  (set-face-attribute 'diredfl-flag-mark nil :foreground "#e59866" :background 'unspecified)
  (set-face-attribute 'diredfl-rare-priv nil :foreground "#89b4fa" :background 'unspecified)
  (set-face-attribute 'diredfl-other-priv nil :inherit 'default :background 'unspecified)
  (set-face-attribute 'diredfl-dir-heading nil :foreground "#FDFD96" :background 'unspecified)
  (set-face-attribute 'diredfl-autofile-name nil :inherit 'default :background 'unspecified)
  (set-face-attribute 'diredfl-tagged-autofile-name nil :inherit 'default :background 'unspecified)
  (set-face-attribute 'diredfl-executable-tag nil :inherit 'default :foreground "#c6a0f6" :background 'unspecified)
  (set-face-attribute 'diredfl-deletion nil :inherit 'default :foreground "#f7768e" :background 'unspecified)
  (set-face-attribute 'diredfl-file-suffix nil :inherit 'default :foreground "#7ebebd" :background 'unspecified)
  (set-face-attribute 'diredfl-deletion-file-name nil :inherit 'default :foreground "red" :background 'unspecified)
  (set-face-attribute 'diredfl-compressed-file-name nil :inherit 'default :foreground "#929292" :background 'unspecified)
  (set-face-attribute 'diredfl-compressed-file-suffix nil :inherit 'default :foreground "#89b4fa" :background 'unspecified))

(use-package dash
  :defer t
  :config
  (global-dash-fontify-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package projectile
  :defer t
  :init
  (projectile-mode 1)
  :config
  (setq-default projectile-mode-line-prefix " Proj")
  (when (executable-find "rg")
    (setq-default projectile-generic-command "rg --files --hidden -0")))

(use-package ibuffer-projectile
  :after projectile
  :config
  (add-hook 'ibuffer-hook
	    (lambda ()
	      (ibuffer-projectile-set-filter-groups)
	      (unless (eq ibuffer-sorting-mode 'alphabetic)
		(ibuffer-do-sort-by-alphabetic))))
  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide)
		" "
		(size 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		project-relative-file))))

(use-package perspective
  :defer t
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :config
  (set-face-attribute 'persp-selected-face nil :foreground "#c9d9ff" :weight 'bold)
  :init
  (persp-mode))

(use-package persp-projectile
  :defer t)
#+end_src
** Python
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook #'flycheck-mode))

(use-package elpy
  :defer t
  :init
  (elpy-enable))

(add-hook 'python-mode-hook
          (lambda ()
            (flymake-mode -1)))

(use-package uv-mode
  :defer t
  :hook (python-mode . uv-mode-auto-activate-hook))
#+end_src
** Rust
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package rust-mode
  :defer t
  :custom
  (setq rust-format-on-save t))

(use-package flycheck-rust
  :defer t)

(with-eval-after-load 'rust-mode
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  (add-hook 'rust-mode-hook
          (lambda () (setq indent-tabs-mode nil))))
#+end_src
** Shell
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(when (is-windows)
  (use-package powershell
    :defer t)

  (use-package ob-powershell
    :defer t
    :commands
    (org-babel-execute:powershell
     org-babel-expand-body:powershell)))

(when (is-linux)
  (use-package fish-mode
    :defer t
    :mode "\\.fish\\'"))

(use-package xterm-color
  :commands (xterm-color-filter))

(use-package capf-autosuggest
   :hook
   (eshell-mode . capf-autosuggest-mode))

(with-eval-after-load 'capf-autosuggest
  (define-key capf-autosuggest-active-mode-map (kbd "<right>") #'capf-autosuggest-accept))

(with-eval-after-load 'eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setenv "TERM" "xterm-256color")
              (setq eshell-output-filter-functions
                    (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
              (setq eshell-scroll-to-bottom-on-input t)
              (define-key eshell-hist-mode-map (kbd "M-r") #'consult-history)))
  (add-hook 'eshell-before-prompt-hook (setq xterm-color-preserve-properties t)))
#+end_src
** Smart
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package smartparens
  :defer t
  :init
  (smartparens-global-mode +1))

(with-eval-after-load 'smartparens
  (defun sp-elisp-in-src-block-p (_id _action _context)
    (when (org-in-src-block-p)
      (let* ((el (org-element-at-point))
             (lang (org-element-property :language el))
             (mode (intern (concat (if (string= lang "elisp") "emacs-lisp" lang) "-mode"))))
	(memq mode sp-lisp-modes))))

  (sp-local-pair '(emacs-lisp-mode) "'" "'" :when '(sp-in-string-p))
  (sp-local-pair '(emacs-lisp-mode) "`" "`" :when '(sp-in-string-p))

  (sp-local-pair 'org-mode "'" "'"
		 :unless '(:add sp-elisp-in-src-block-p))
  (sp-local-pair 'org-mode "`" "`"
		 :unless '(:add sp-elisp-in-src-block-p)))

(defun my-org-conditional-smartparens ()
  (let ((in-src-block (org-in-src-block-p t)))
    (if in-src-block
        (unless smartparens-mode
          (smartparens-mode +1))
      (when smartparens-mode
        (smartparens-mode -1)))))

(add-hook 'org-mode-hook
          (lambda ()
            (my-org-conditional-smartparens)
            (add-hook 'post-command-hook
		      #'my-org-conditional-smartparens nil :local)))

(use-package expand-region
  :defer t)
#+end_src
** Snippets
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package yasnippet
  :defer t
  :init
  (yas-global-mode 1)
  :hook  ((after-init-hook . yas-reload-all)
          (prog-mode-hook  . yas-minor-mode)))

(setq default-cursor-color "gray")
(setq yasnippet-can-fire-cursor-color "#66cdaa")

(defun yasnippet-can-fire-p (&optional field)
  (interactive)
  (setq yas--condition-cache-timestamp (current-time))
  (let (templates-and-pos)
    (unless (and yas-expand-only-for-last-commands
                 (not (member last-command yas-expand-only-for-last-commands)))
      (setq templates-and-pos (if field
                                  (save-restriction
                                    (narrow-to-region (yas--field-start field)
                                                      (yas--field-end field))
                                    (yas--templates-for-key-at-point))
                                (yas--templates-for-key-at-point))))
    (and templates-and-pos (first templates-and-pos))))

(defun my-can-expand ()
  "Return true if right after an expandable thing."
  (or (abbrev--before-point) (yasnippet-can-fire-p)))

(defun my-change-cursor-color-when-can-expand ()
  "Change cursor color based on whether a snippet or abbrev can expand."
  (set-cursor-color (if (my-can-expand)
                        yasnippet-can-fire-cursor-color
                      default-cursor-color)))

(with-eval-after-load 'yasnippet
  (add-hook 'post-command-hook 'my-change-cursor-color-when-can-expand))
#+end_src
** Tabs
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(unless (is-android)
  (use-package centaur-tabs
    :defer t
    :config
    (setq centaur-tabs-set-icons t
	  centaur-tabs-style "bar"
	  centaur-tabs-set-bar 'left
	  centaur-tabs-icon-type 'nerd-icons)
    (set-face-attribute 'tab-line nil
			:background "#282b33")
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)))
#+end_src
** Treemacs
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package treemacs
  :defer t
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	  treemacs-deferred-git-apply-delay        0.5
	  treemacs-directory-name-transformer      #'identity
	  treemacs-display-in-side-window          t
	  treemacs-eldoc-display                   'simple
	  treemacs-file-event-delay                2000
	  treemacs-file-extension-regex            treemacs-last-period-regex-value
	  treemacs-file-follow-delay               0.2
	  treemacs-file-name-transformer           #'identity
	  treemacs-follow-after-init               t
	  treemacs-expand-after-init               t
	  treemacs-find-workspace-method           'find-for-file-or-pick-first
	  treemacs-git-command-pipe                ""
	  treemacs-goto-tag-strategy               'refetch-index
	  treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	  treemacs-hide-dot-git-directory          t
	  treemacs-indentation                     2
	  treemacs-indentation-string              " "
	  treemacs-is-never-other-window           nil
	  treemacs-max-git-entries                 5000
	  treemacs-missing-project-action          'ask
	  treemacs-move-forward-on-expand          nil
	  treemacs-no-png-images                   nil
	  treemacs-no-delete-other-windows         t
	  treemacs-project-follow-cleanup          nil
	  treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	  treemacs-position                        'left
	  treemacs-read-string-input               'from-child-frame
	  treemacs-recenter-distance               0.1
	  treemacs-recenter-after-file-follow      nil
	  treemacs-recenter-after-tag-follow       nil
	  treemacs-recenter-after-project-jump     'always
	  treemacs-recenter-after-project-expand   'on-distance
	  treemacs-litter-directories              '("/.venv")
	  treemacs-project-follow-into-home        nil
	  treemacs-show-cursor                     nil
	  treemacs-show-hidden-files               t
	  treemacs-silent-filewatch                nil
	  treemacs-silent-refresh                  nil
	  treemacs-sorting                         'alphabetic-asc
	  treemacs-select-when-already-in-treemacs 'move-back
	  treemacs-space-between-root-nodes        t
	  treemacs-tag-follow-cleanup              t
	  treemacs-tag-follow-delay                1.5
	  treemacs-text-scale                      nil
	  treemacs-user-mode-line-format           nil
	  treemacs-user-header-line-format         nil
	  treemacs-wide-toggle-width               70
	  treemacs-width                           35
	  treemacs-width-increment                 1
	  treemacs-width-is-initially-locked       t
	  treemacs-workspace-switch-cleanup        nil
	  treemacs-python-executable               "python")

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
		 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil)))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-magit
  :after (treemacs magit))

(unless (is-android)
  (use-package treemacs-nerd-icons
    :config
    (treemacs-load-theme "nerd-icons")))

(add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
#+end_src
** Undo
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package undo-tree
  :defer t
  :init
  (global-undo-tree-mode 1))

(with-eval-after-load 'undo-tree
  (setq undo-tree-auto-save-history nil))
#+end_src
** Unicode
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package font-utils)

(use-package ucs-utils)

(use-package persistent-soft)

(use-package unicode-fonts
  :custom
  (unicode-fonts-skip-font-groups '(low-quality-glyphs))
  :init
  (unicode-fonts-setup))

(add-hook 'server-after-make-frame-hook
          (lambda ()
            (setq unicode-fonts-setup-done nil)
            (unicode-fonts-setup)))
#+end_src
** Web
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(use-package web-mode
  :defer t
  :mode
  (("\\.phtml\\'" . web-mode)
   ("\\.php\\'" . web-mode)
   ("\\.tpl\\'" . web-mode)
   ("\\.[agj]sp\\'" . web-mode)
   ("\\.as[cp]x\\'" . web-mode)
   ("\\.erb\\'" . web-mode)
   ("\\.mustache\\'" . web-mode)
   ("\\.djhtml\\'" . web-mode)))

(use-package yaml-mode
  :defer t
  :mode "\\.yml\\'")

(use-package json-mode
  :defer t
  :mode "\\.json$")

(use-package js2-mode
  :defer t
  :mode ("\\.js$" . js2-mode)
  :init
  (setq js2-strict-missing-semi-warning nil))
#+end_src
** Which
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(defun my-which-key-setup-buffer-ligatures ()
  "Enable global-ligature-mode after which key"
  (global-ligature-mode t))

(use-package which-key
  :defer t
  :init
  (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-allow-imprecise-window-fit nil
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.5
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " -> " )
  (set-face-attribute 'which-key-separator-face nil :inherit 'default)
  (with-eval-after-load 'which-key
    (add-hook 'which-key-init-buffer-hook #'my-which-key-setup-buffer-ligatures)))
#+end_src
* Misc
** Variables
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(setq user-full-name                          "Jorge Olmos"
      user-mail-address                       "j0lms@outlook.es"
      buffer-move-stay-after-swap             t
      python-shell-interpreter                "python"
      initial-buffer-choice                   (lambda () (get-buffer-create "*dashboard*") (dashboard-open))
      make-backup-files                       nil
      backup-directory-alist                  '(("." . "~/.emacs.d/backup"))
      backward-delete-char-untabify-method    'hungry
      sentence-end-double-space               nil
      recenter-positions                      '(top middle bottom)
      scroll-step                             1
      scroll-margin                           0
      scroll-conservatively                   100000
      scroll-preserve-screen-position         1
      use-file-dialog                         nil
      use-dialog-box                          nil
      pop-up-windows                          nil
      debug-on-error                          t
      kill-whole-line                         t
      doc-view-continuous                     t
      server-client-instructions              nil
      inhibit-startup-message                 t
      inhibit-default-init                    t
      inhibit-startup-screen                  t
      inhibit-startup-echo-area-message       t
      font-lock-maximum-decoration            t
      font-lock-maximum-size                  t
      isearch-invisible                       t
      isearch-lazy-count                      t
      search-invisible                        t
      frame-inhibit-implied-resize            t
      frame-title-format                      nil
      switch-to-buffer-obey-display-actions   t
      switch-to-buffer-in-dedicated-window    t
      split-height-threshold                  80
      split-width-threshold                   125
      initial-scratch-message                 ""
      require-final-newline                   t
      completion-auto-help                    nil
      auto-save-interval                      200
      auto-save-timeout                       20
      global-mark-ring-max                    50000
      confirm-kill-processes                  nil
      gdb-many-windows                        t
      gdb-show-main                           t
      save-interprogram-paste-before-kill     nil
      auto-mode-case-fold                     nil
      auto-window-vscroll                     nil
      gc-cons-threshold                       most-positive-fixnum
      enable-recursive-minibuffers            t
      x-underline-at-descent-line             t
      dired-listing-switches                  "-alk"
      large-file-warning-threshold            (* 15 1024 1024)
      byte-compile-warnings                   '(cl-functions)
      ediff-split-window-function             'split-window-horizontally
      ediff-window-setup-function             'ediff-setup-windows-plain
      dired-recursive-deletes                 'always
      dired-recursive-copies                  'always
      search-default-mode                     'char-fold-to-regexp
      read-extended-command-predicate         #'command-completion-default-include-p
      minibuffer-prompt-properties            '(read-only t cursor-intangible t face minibuffer-prompt)
      text-mode-ispell-word-completion        nil
      frame-title-format                      '((:eval
                                                 (if (buffer-file-name)
                                                     (abbreviate-file-name (buffer-file-name))
                                                   "%b"))))

(setq-default bidi-display-reordering             nil
              cursor-in-non-selected-windows      nil
              enable-recursive-minibuffers        nil
              highlight-nonselected-windows       nil
              window-divider-default-places       t
              window-divider-default-bottom-width 1
              window-divider-default-right-width  1
              confirm-nonexistent-file-or-buffer  nil
              highlight-nonselected-windows       nil
              image-animate-loop                  t
              indicate-buffer-boundaries          nil
              indicate-empty-lines                nil
              max-mini-window-height              0.4
              mode-line-default-help-echo         nil
              mouse-yank-at-point                 t
              resize-mini-windows                 'grow-only
              show-help-function                  nil
              line-spacing                        0.11
              pos-tip-internal-border-width       6
              pos-tip-border-width                1
              find-file-visit-truename            t
              lexical-binding                     t
              uniquify-buffer-name-style          'forward
              ring-bell-function                  #'ignore
              visible-bell                        nil)

(fset #'yes-or-no-p #'y-or-n-p)
(fset #'display-startup-echo-area-message #'ignore)
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-locale-environment "en_US.UTF-8")
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(add-hook 'init-hook #'delete-selection-mode)
(add-hook 'init-hook #'save-place-mode)
(add-hook 'prog-mode-hook 'auto-fill-mode)
#+end_src
** Functions
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(defun window-split-toggle ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer))))))

(defun my-backward-delete-word (arg)
  (interactive "p")
  (let ((start (point)))
    (backward-word arg)
    (skip-chars-backward " \t\n")
    (let ((end (point)))
      (if (= start end)
          (join-line)
        (delete-region start end)))))

(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(defun my-smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line."
  (interactive "^p")
  (setq arg (or arg 1))

  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(defun sanityinc/eval-last-sexp-or-region (prefix)
  "Eval region from BEG to END if active, otherwise the last sexp."
  (interactive "P")
  (if (and (mark) (use-region-p))
      (eval-region (min (point) (mark)) (max (point) (mark)))
    (pp-eval-last-sexp prefix)))

(defun goto-first-reference ()
  (interactive)
  (eval
   `(progn
      (goto-char (point-min))
      (search-forward-regexp
       (rx symbol-start ,(thing-at-point 'symbol) symbol-end))
      (beginning-of-thing 'symbol))))

(defun my-occur-from-isearch ()
  (interactive)
  (let ((query (if isearch-regexp
		   isearch-string
		 (regexp-quote isearch-string))))
    (isearch-update-ring isearch-string isearch-regexp)
    (let (search-nonincremental-instead)
      (ignore-errors (isearch-done t t)))
    (occur query)))

(defun my-consult-line-from-isearch ()
  "Call `consult-line` with the search string from the last `isearch`."
  (interactive)
  (consult-line isearch-string))

(define-key isearch-mode-map (kbd "C-c") 'my-consult-line-from-isearch)
(define-key isearch-mode-map (kbd "C-o") 'my-occur-from-isearch)
(define-key isearch-mode-map (kbd "C-d") 'isearch-forward-symbol-at-point)
(define-key isearch-mode-map (kbd "C-q") 'isearch-query-replace-regexp)

(defadvice isearch-mode 
    (around isearch-mode-default-string 
	    (forward &optional regexp op-fun recursive-edit word-p) activate)
  (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
      (progn
        (isearch-update-ring (buffer-substring-no-properties (mark) (point)))
        (deactivate-mark)
        ad-do-it
        (if (not forward)
            (isearch-repeat-backward)
          (goto-char (mark))
          (isearch-repeat-forward)))
    ad-do-it))

(defun my-multi-occur-in-matching-buffers (regexp &optional allbufs)
  "Show lines matching REGEXP in all file-visiting buffers."
  (interactive (occur-read-primary-args))
  (multi-occur-in-matching-buffers "." regexp allbufs))

(defun my-select-window (window &rest _)
  "Select WINDOW for display-buffer-alist"
  (select-window window))

(defun my-change-number-at-point (change-function &optional arg)
  "Helper function to change a number at point.
CHANGE-FUNCTION is a function that takes the current number and
an optional ARG (like a prefix argument or increment) and returns the new number.
ARG is an optional argument passed to CHANGE-FUNCTION."
  (interactive)
  (search-forward-regexp (rx digit) nil t)
  (let ((number (number-at-point))
        (point-before-change (point)))
    (when number
      (let ((new-number (funcall change-function number arg)))
        (if new-number
            (progn
              (delete-region (match-beginning 0) (match-end 0))
              (insert (number-to-string new-number))
              (goto-char point-before-change))
          (message "No previous prime or overflow."))))))

(defun my-increment-number-fn (n increment)
  "Function to increment a number N by INCREMENT."
  (+ n (or increment 1)))

(defun my-decrement-number-fn (n decrement)
  "Function to decrement a number N by DECREMENT."
  (- n (or decrement 1)))

(defun my-next-prime-fn (n &optional arg)
  "Function to find the next prime from N.
With ARG, finds the ARG-th next prime."
  (let ((current-prime n))
    (dotimes (_ (or arg 1))
      (setq current-prime (next-prime current-prime)))
    current-prime))

(defun my-prev-prime-fn (n &optional arg)
  "Function to find the previous prime from N.
With ARG, finds the ARG-th previous prime."
  (let ((current-prime n))
    (dotimes (_ (or arg 1))
      (setq current-prime (prev-prime current-prime)))
    current-prime))

(defun my-increment-number-at-point (&optional increment)
  "Increment number at point like vim's C-a"
  (interactive "p")
  (my-change-number-at-point 'my-increment-number-fn increment))

(defun my-decrement-number-at-point (&optional increment)
  "Decrement number at point like vim's C-x"
  (interactive "p")
  (my-change-number-at-point 'my-decrement-number-fn increment))

(defun my-next-prime-number-at-point (&optional arg)
  "Replace the number at point with the next prime number.
With prefix ARG, find the ARG-th next prime."
  (interactive "p")
  (my-change-number-at-point 'my-next-prime-fn arg))

(defun my-prev-prime-number-at-point (&optional arg)
  "Replace the number at point with the previous prime number.
With prefix ARG, find the ARG-th previous prime."
  (interactive "p")
  (my-change-number-at-point 'my-prev-prime-fn arg))

(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(defun my-copy-and-comment ()
  "Copy region and comment it."
  (interactive)
  (kill-ring-save (region-beginning) (region-end))
  (comment-dwim nil))

(defun clone-file-and-open (filename)
  "Clone the current buffer writing it into FILENAME and open it"
  (interactive "FClone to file: ")
  (save-restriction
    (widen)
    (write-region (point-min) (point-max) filename nil nil nil 'confirm))
  (find-file filename))

(defun eval-buffer-until-error ()
  "Evaluate emacs buffer until error occured."
  (interactive)
  (goto-char (point-min))
  (while t (eval (read (current-buffer)))))

(defun what-face (pos)
  "Display face found at the current point."
  (interactive "d")
  (let ((face (or (get-char-property (point) 'read-face-name)
                  (get-char-property (point) 'face))))
    (if face (message "Face: %s" face) (message "No face at %d" pos))))

(defun delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))

(if (fboundp 'rename-visited-file)
    (defalias 'rename-this-file-and-buffer 'rename-visited-file)
  (defun rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (progn
        (when (file-exists-p filename)
          (rename-file filename new-name 1))
        (set-visited-file-name new-name)
        (rename-buffer new-name)))))

(defun format-date (format)
  (let ((system-time-locale "es_VE.UTF-8"))
    (insert (format-time-string format))))

(defun my-comint-init ()
  (setq comint-process-echoes t))
(add-hook 'comint-mode-hook 'my-comint-init)

(defun my-close-other-buffers ()
  (interactive)
  (mapc (lambda (buf)
          (unless (buffer-modified-p buf)
            (kill-buffer buf)))
        (delete (current-buffer)
                (buffer-list))))

(defun my-def-rep-command (alist &optional initial-key)
  (let* ((initial-key (or initial-key (caar alist)))
         (initial-entry (assoc initial-key alist))
         (initial-func (cdr initial-entry))
         (keymap (make-sparse-keymap)))
    (mapc (lambda (x)
            (when x
              (define-key keymap (kbd (car x)) (cdr x))))
          alist)
    `(lambda (arg)
       (interactive "p")
       (when ',initial-func
         (funcall ',initial-func arg))
       (set-transient-map ',keymap t))))

(defun my-org-fix-block-indentation ()
  "Fix the indentation of the current src block."
  (interactive)
  (org-edit-special)
  (indent-region (point-min) (point-max))
  (org-edit-src-exit))

(defun insert-deadline ()
  (interactive)
  (format-date "<%Y-%M-%d %A>"))

(defun insert-schedule ()
  (interactive)
  (format-date "<%Y-%m-%d %H:%M>"))

(defun insert-timestamp ()
  (interactive)
  (format-date "[%Y-%m-%d %A %H:%M:%S]"))
#+end_src
* Bindings
** Settings
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(when (is-android)
  (xterm-mouse-mode 1)
  (global-set-key (kbd "<wheel-up>") 'scroll-down-line)
  (global-set-key (kbd "<wheel-down>") 'scroll-up-line))

(repeat-mode 1)
(windmove-default-keybindings)
(setq tab-always-indent 'complete)
#+end_src
** General
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(defvar my-org-src-block-repeat-cmds
  '(("n" . org-babel-next-src-block)
    ("p" . org-babel-previous-src-block)
    ("q" . (lambda () (interactive) (message "Exited Org source block navigation."))))
  "Commands for repeatable Org source block navigation.")

(defvar my-buffer-navigation-repeat-cmds
  '(("n" . next-buffer)
    ("p" . previous-buffer)
    ("q" . (lambda () (interactive) (message "Exited buffer navigation."))))
  "Commands for repeatable buffer navigation.")

(defvar my-undo-redo-repeat-cmds
  '(("u" . undo-tree-undo)
    ("r" . undo-tree-redo)
    ("q" . (lambda () (interactive) (message "Exited undo/redo repetition."))))
  "Commands for repeatable undo/redo.")

(defvar my-number-increment-repeat-cmds
  '(("a" . my-increment-number-at-point)
    ("x" . my-decrement-number-at-point)
    ("A" . my-next-prime-number-at-point)
    ("X" . my-prev-prime-number-at-point)
    ("q" . (lambda () (interactive) (message "Exited number increment/decrement mode."))))
  "Commands for repeatable number increment/decrement.")

(defvar my-sp-adjacent-sexp-repeat-cmds
  '(("n" . sp-next-sexp)
    ("p" . sp-previous-sexp)
    ("q" . (lambda () (interactive) (message "Exited adjacent sexp navigation."))))
  "Commands for repeatable adjacent sexp navigation.")

(defvar my-sp-thing-select-repeat-cmds
  '(("]" . sp-select-next-thing)
    ("[" . sp-select-previous-thing-exchange)
    ("*" . sp-select-next-thing-exchange)
    ("q" . (lambda () (interactive) (message "Exited thing selection."))))
  "Commands for repeatable thing selection.")

(defvar my-flycheck-repeat-cmds
  '(("n" . flycheck-next-error)
    ("p" . flycheck-previous-error)
    ("q" . (lambda () (interactive) (message "Exited Flycheck error navigation."))))
  "Commands for repeatable Flycheck error navigation.")

(defvar my-hl-todo-repeat-cmds
  '(("n" . hl-todo-next)
    ("p" . hl-todo-previous)
    ("q" . (lambda () (interactive) (message "Exited hl-todo navigation."))))
  "Commands for repeatable hl-todo navigation.")

(defun my-ibuffer-with-tmenu ()
  "Open Ibuffer and then casual-ibuffer-tmenu."
  (interactive)
  (ibuffer)
  (casual-ibuffer-tmenu))

(defun my-dired-with-tmenu ()
  "Open Ibuffer and then casual-ibuffer-tmenu."
  (interactive)
  (dired user-emacs-directory)
  (casual-dired-tmenu))

(defun my-dired-jump-with-tmenu ()
  "Open Ibuffer and then casual-ibuffer-tmenu."
  (interactive)
  (dired-jump)
  (casual-dired-tmenu))

(defun my-calc-with-tmenu ()
  "Open Ibuffer and then casual-ibuffer-tmenu."
  (interactive)
  (calc)
  (casual-calc-tmenu))

(use-package general
  :config
  (general-create-definer leader-key
    :prefix "C-c")
  (leader-key
    "p" '(projectile-command-map :wk "projectile"))
  (leader-key
    "f" '(:ignore t :wk "find")
    "f c" '((lambda ()
  	      (interactive)
	      (find-file "~/.emacs.d/org/config.org"))
  	    :wk "Edit emacs config")
    "f e" '(my-dired-with-tmenu :wk "Dired with transient menu")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f f" '(find-file :wk "Find file")
    "f r" '(recentf :wk "Find recent files")
    "f R" '(rename-this-file-and-buffer :wk "Rename file and buffer")
    "f i" '(casual-isearch-tmenu :wk "Isearch transient menu")
    "f n" `(,(my-def-rep-command my-flycheck-repeat-cmds "n")
            :wk "Next Flycheck error (n/p to repeat, q to quit)")
    "f p" `(,(my-def-rep-command my-flycheck-repeat-cmds "p")
            :wk "Previous Flycheck error (n/p to repeat, q to quit)")
    "f t" '(:ignore t :wk "find TODOs")
    "f t n" `(,(my-def-rep-command my-hl-todo-repeat-cmds "n")
              :wk "Next hl-todo (n/p to repeat, q to quit)")
    "f t p" `(,(my-def-rep-command my-hl-todo-repeat-cmds "p")
              :wk "Previous hl-todo (n/p to repeat, q to quit)"))
  (leader-key
    "b" '(:ignore t :wk "buffers")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(my-ibuffer-with-tmenu :wk "Ibuffer with transient menu")
    "b p" `(,(my-def-rep-command my-buffer-navigation-repeat-cmds "p")
            :wk "Navigate buffers (n/p to repeat, q to quit)")
    "b n" `(,(my-def-rep-command my-buffer-navigation-repeat-cmds "n")
            :wk "Navigate buffers (n/p to repeat, q to quit)")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b m" '(make-frame :wk "Open buffer in new frame")
    "b R" '(rename-buffer :wk "Rename buffer"))
  (leader-key
    "r" '(:ignore t :wk "regionals")
    "r e" '(eval-region :wk "Evaluate elisp in region")
    "r i" '(indent-region :wk "Indent elisp in region")
    "r x" '(er/expand-region :wk "Expand region")
    "r (" '(er/mark-outside-pairs :wk "Mark pairs"))
  (leader-key
    "e" '(:ignore t :wk "evals")
    "e e" '(sanityinc/eval-last-sexp-or-region :wk "Evaluate elisp expression or region")
    "e d" '(eval-defun :wk "Evaluate defun contained or after a point")
    "e b" '(eval-buffer :wk "Evaluate whole buffer")
    "e l" '(pp-eval-last-sexp :wk "Evaluate elisp expression before point")
    "e s" '(eshell :wk "Eshell"))
  (leader-key
    "t" '(:ignore t :wk "toggles")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t v" '(visual-line-mode :wk "Toggle truncated lines")
    "t g" '(git-timemachine-toggle :wk "Toggle git timemachine")
    "t s" '(window-split-toggle :wk "Toggle two frame split")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t m" '(minimap-mode :wk "Toggle minimap")
    "t t" '(treemacs :wk "Toggle treemacs")
    "t e" '(casual-editkit-main-tmenu :wk "Editkit transient menu")
    "t c" '(centaur-tabs-mode :wk "Toggle centaur tabs"))
  (leader-key
    "d" '(:ignore t :wk "directory")
    "d a" '(dashboard-open :wk "Open dashboard")
    "d d" '(dired :wk "Open dired")
    "d j" '(my-dired-jump-with-tmenu :wk "Dired jump to current with transient menu")
    "d r" '(deadgrep :wk "Ripgrep text search"))
  (leader-key
    "o" '(:ignore t :wk "org")
    "o a" '(org-agenda :wk "Org agenda")
    "o l" '(org-insert-link :wk "Org insert link")
    "o S" '(org-store-link :wk "Org store link")
    "o A" '(org-archive-subtree :wk "Org archive subtree")
    "o g" '(org-goto :wk "Org goto")
    "o L" '(org-toggle-link-display :wk "Org toggle link display")
    "o I" '(org-toggle-inline-images :wk "Org toggle inline images")
    "o k" '(org-cut-subtree :wk "Org cut subtree")
    "o V" '(org-reveal :wk "Org reveal")
    "o R" '(org-refile :wk "Org refile")
    "o y" '(org-copy-subtree :wk "Org copy subtree")
    "o h" '(org-toggle-heading :wk "Org toggle heading")
    "o H" '(org-insert-heading-respect-content :wk "Org insert heading respecting content")
    "o e" '(org-export-dispatch :wk "Org export dispatch")
    "o u" '(org-update-dblock :wk "Org update dynamic block")
    "o U" '(org-update-all-dblocks :wk "Org update all dynamic blocks")
    "o O" '(org-footnote :wk "Org footnote")
    "o ]" '(org-narrow-to-subtree :wk "Org narrow to subtree")
    "o [" '(widen :wk "Org widen")
    "o N" '(org-add-note :wk "Org add note")
    "o E" '(org-set-effort :wk "Org set effort")
    "o B" '(org-table-blank-field :wk "Org table blank field")
    "o <" '(org-date-from-calendar :wk "Org date from calendar")
    "o >" '(org-goto-calendar :wk "Org goto calendar")
    "o t" '(org-todo :wk "Org todo")
    "o w" '(org-edit-special :wk "Org edit special")
    "o q" '(org-edit-src-exit :wk "Org edit source exit")
    "o z" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer other window")
    "o RET" '(org-open-at-point :wk "Org open at point")
    "o s" '(org-mark-subtree :wk "Org mark subtree")
    "o i" '(org-insert-structure-template :wk "Org insert block structure")
    "o b" '(org-babel-mark-block :wk "Org mark source block")
    "o B" '(org-babel-tangle :wk "Org babel tangle")
    "o I" '(org-toggle-item :wk "Org toggle item")
    "o d" '(org-time-stamp :wk "Org time stamp")
    "o c" '(my-org-comment-dwim :wk "Comment elisp in org region")
    "o n" `(,(my-def-rep-command my-org-src-block-repeat-cmds "n")
            :wk "Navigate source blocks (n/p to repeat, q to quit)")
    "o p" `(,(my-def-rep-command my-org-src-block-repeat-cmds "p")
            :wk "Navigate source blocks (n/p to repeat, q to quit)"))
  (leader-key
    "h" '(:ignore t :wk "help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h F" '(describe-face :wk "Describe face")
    "h r" '((lambda () (interactive)
	      (my-text-scale-reset-all-faces)
              (load-file "~/.emacs.d/init.el")
              (ignore (elpaca-process-queues))
	      (org-save-all-org-buffers)
	      (message "Emacs reloaded"))
            :wk "Reload emacs config")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty"))
  (leader-key
    "w" '(:ignore t :wk "windows")
    "w c" '(quit-window :wk "Close window")
    "w n" '(new-frame :wk "New window")
    "w v" '(split-window-horizontally :wk "Vertical split window")
    "w s" '(split-window-vertically :wk "Horizontal split window"))
  (leader-key
    "u" '(:ignore t :wk "undo")
    "u u" `(,(my-def-rep-command my-undo-redo-repeat-cmds "u")
            :wk "Undo/Redo (u/r to repeat, q to quit)")
    "u r" `(,(my-def-rep-command my-undo-redo-repeat-cmds "r")
            :wk "Undo/Redo (u/r to repeat, q to quit)")
    "u t" '(undo-tree-visualize :wk "Visualize undo tree"))
  (leader-key
    "g" '(:ignore t :wk "git")
    "g /" '(magit-dispatch :wk "Magit dispatch")
    "g ." '(magit-file-dispatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-files :wk "Git stage files")
    "g u" '(magit-unstage-files :wk "Git unstage files"))
  (leader-key
    "n" '(:ignore t :wk "numbers")
    "n a" `(,(my-def-rep-command my-number-increment-repeat-cmds "a")
            :wk "Increment/Decrement number (a/x to repeat, q to quit)")
    "n x" `(,(my-def-rep-command my-number-increment-repeat-cmds "x")
            :wk "Increment/Decrement number (a/x to repeat, q to quit)")
    "n C" '(my-calc-with-tmenu :wk "Calc with transient menu"))
  (leader-key
    "s" '(:ignore t :wk "smartparens")
    "s n" '(sp-narrow-to-sexp :wk "Narrow to sexp")
    "s f" '(sp-forward-sexp :wk "Forward sexp")
    "s b" '(sp-backward-sexp :wk "Backward sexp")
    "s d" '(sp-down-sexp :wk "Down sexp")
    "s a" '(sp-backward-down-sexp :wk "Backward down sexp")
    "s A" '(sp-beginning-of-sexp :wk "Beginning of sexp")
    "s D" '(sp-end-of-sexp :wk "End of sexp")
    "s e" '(sp-up-sexp :wk "Up sexp")
    "s u" '(sp-backward-up-sexp :wk "Backward up sexp")
    "s s" '(:ignore t :wk "smart traverse")
    "s s t" '(sp-transpose-sexp :wk "Transpose sexp")
    "s s n" `(,(my-def-rep-command my-sp-adjacent-sexp-repeat-cmds "n")
              :wk "Next/Previous sexp (n/p to repeat, q to quit)")
    "s s p" `(,(my-def-rep-command my-sp-adjacent-sexp-repeat-cmds "p")
              :wk "Next/Previous sexp (n/p to repeat, q to quit)")
    "s s k" '(sp-kill-sexp :wk "Kill sexp")
    "s s w" '(sp-copy-sexp :wk "Copy sexp")
    "s s <DEL>" '(sp-unwrap-sexp :wk "Unwrap sexp")
    "s s <BS>" '(sp-backward-unwrap-sexp :wk "Backward unwrap sexp")
    "s >" '(sp-forward-slurp-sexp :wk "Forward slurp sexp")
    "s <" '(sp-forward-barf-sexp :wk "Forward barf sexp")
    "s }" '(sp-backward-slurp-sexp :wk "Backward slurp sexp")
    "s {" '(sp-backward-barf-sexp :wk "Backward barf sexp")
    "s M-d" '(sp-splice-sexp :wk "Splice sexp")
    "s C-<DEL>" '(sp-splice-sexp-killing-forward :wk "Splice and kill forward")
    "s C-<BS>" '(sp-splice-sexp-killing-backward :wk "Splice and kill backward")
    "s C-S-<BS>" '(sp-splice-sexp-killing-around :wk "Splice and kill around")
    "s *" `(,(my-def-rep-command my-sp-thing-select-repeat-cmds "*")
            :wk "Select next/previous thing (}/[ to repeat, q to quit)" "*")
    "s [" `(,(my-def-rep-command my-sp-thing-select-repeat-cmds "[")
            :wk "Select next/previous thing (}/[ to repeat, q to quit)" "[")
    "s ]" `(,(my-def-rep-command my-sp-thing-select-repeat-cmds "]")
            :wk "Select next/previous thing (}/[ to repeat, q to quit)" "]")
    "s M-f" '(sp-forward-symbol :wk "Forward symbol")
    "s M-b" '(sp-backward-symbol :wk "Backward symbol")
    "s t" '(sp-prefix-tag-object :wk "Prefix tag object")
    "s p" '(sp-prefix-pair-object :wk "Prefix pair object")
    "s c" '(sp-convolute-sexp :wk "Convolute sexp")
    "s A" '(sp-absorb-sexp :wk "Absorb sexp")
    "s E" '(sp-emit-sexp :wk "Emit sexp")
    "s P" '(sp-add-to-previous-sexp :wk "Add to previous sexp")
    "s N" '(sp-add-to-next-sexp :wk "Add to next sexp")
    "s J" '(sp-join-sexp :wk "Join sexp")
    "s S" '(sp-split-sexp :wk "Split sexp"))
  (leader-key
    "c" '(:ignore t :wk "consult")
    "c a" '(consult-agenda :wk "Consult Org agenda")
    "c b" '(consult-buffer :wk "Consult buffer")
    "c c" '(consult-locate :wk "Consult locate (find files by name)")
    "c C" '(consult-compile-error :wk "Consult compile error")
    "c d" '(consult-fd :wk "Consult find (find files by content)")
    "c f" '(consult-flycheck :wk "Consult flycheck error")
    "c g" '(consult-grep :wk "Consult grep")
    "c G" '(consult-git-grep :wk "Consult git grep")
    "c h" '(consult-history :wk "Consult history")
    "c i" '(consult-imenu :wk "Consult imenu (current buffer symbols)")
    "c I" '(consult-imenu-multi :wk "Consult imenu (multiple buffers)")
    "c k" '(consult-kmacro :wk "Consult kmacro")
    "c l" '(consult-line :wk "Consult line")
    "c L" '(consult-line-multi :wk "Consult line (multiple buffers)")
    "c m" '(consult-mark :wk "Consult mark")
    "c M" '(consult-global-mark :wk "Consult man pages")
    "c o" '(consult-outline :wk "Consult outline/org heading")
    "c p" '(consult-project-buffer :wk "Consult project buffer")
    "c r" '(consult-ripgrep :wk "Consult ripgrep")
    "c R" '(consult-register :wk "Consult register")
    "c x" '(consult-complex-command :wk "Consult complex command")
    "c y" '(consult-yank-pop :wk "Consult yank pop")
    "c e" '(consult-recent-file :wk "Consult recent files")
    "c s" '(consult-isearch-history :wk "Consult isearch history")))
#+end_src
** Global
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(global-set-key (kbd "C-+") 'my-text-scale-increase-all-faces)
(global-set-key (kbd "C--") 'my-text-scale-decrease-all-faces)
(global-set-key (kbd "C-*") 'my-text-scale-reset-all-faces)
(global-set-key (kbd "<C-S-up>") 'buf-move-up)
(global-set-key (kbd "<C-S-down>") 'buf-move-down)
(global-set-key (kbd "<C-S-left>") 'buf-move-left)
(global-set-key (kbd "<C-S-right>") 'buf-move-right)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-x C-<") 'mc/mark-all-like-this)
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
(global-set-key (kbd "C-<backspace>") 'my-backward-delete-word)
(global-set-key (kbd "C-g") 'prot/keyboard-quit-dwim)
(global-set-key (kbd "C-a") 'my-smarter-move-beginning-of-line)
(global-set-key (kbd "M-s /") 'my-multi-occur-in-matching-buffers)
(global-set-key (kbd "M-p") 'prev-symbol)
(global-set-key (kbd "M-n") 'next-symbol)
(global-set-key (kbd "M-*") 'goto-first-reference)
#+end_src
* GUI
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(setq display-buffer-alist
      '(
        ((or . ((derived-mode . occur-mode)))
         (display-buffer-reuse-mode-window display-buffer-at-bottom)
         (body-function . my-select-window)
         (dedicated . t)
         (preserve-size . (t . t)))

        ("\\*Help\\*"
         (display-buffer-in-side-window)
	 (side . right)
         (dedicated . t)
	 (window-width . 0.4))

        ("\\*Backtrace\\*"
         (display-buffer-in-side-window)
	 (side . right)
         (dedicated . t)
	 (window-width . 0.4))

        ("\\*Embark Actions\\*"
         (display-buffer-in-side-window)
	 (side . right)
         (dedicated . t)
	 (window-width . 0.4)))

      transient-display-buffer-action
      '(display-buffer-in-side-window
        (side . right)
        (inhibit-same-window . t)
        (window-parameters (no-other-window . t))
        (preserve-window-point . t)
        (preserve-window-start . t)))

(menu-bar-mode 0)
(blink-cursor-mode 0)
(column-number-mode t)
(size-indication-mode t)
(global-visual-line-mode t)
(global-auto-revert-mode t)
(global-prettify-symbols-mode t)
(add-hook 'init-hook #'window-divider-mode)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
* Footer
#+begin_src emacs-lisp :tangle ~/.emacs.d/config.el
(message "Bottom of config.el reached and evaluated.")

(provide 'config)
;;; config.el ends here
#+end_src
